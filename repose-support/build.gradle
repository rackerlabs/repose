buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://repository.jboss.org/nexus/content/groups/public/" }
        maven { url 'https://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath 'org.hibernate.build.gradle:gradle-maven-publish-auth:2.0.1'
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
    }
}

configure(allprojects) {
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
}

allprojects {
    apply plugin: 'idea'
}

subprojects {
    apply plugin: 'scala'
    group = 'org.openrepose.filters.core.test'
    version = '3.0'

    repositories {
        mavenCentral()
    }

    dependencies {
        compile "org.scala-lang:scala-library:$scalaMajDotMin.$scalaPatch"
    }

    tasks.withType(ScalaCompile) {
        scalaCompileOptions.useAnt = false
    }

    task 'create-dirs' << {
        sourceSets.all { set ->
            set.allSource.srcDirs.each { it.mkdirs() }
        }
    }
}

/**
 * Because an Ear project is always the same, this is a function to clean up our build script
 * @param projectName The name of the ear project
 * @param deps a list of dependencies that will go in this ear
 * @return
 */
def filterBundleProject(String projectName, List<String> deps) {
    project(projectName) {
        apply plugin: 'ear'
        apply plugin: 'maven'
        apply plugin: 'maven-publish'
        apply plugin: 'maven-publish-auth'

        dependencies {
            deps.each { proj ->
                deploy project(proj)
                earlib project(proj).configurations.runtime
            }
        }

        publishing {
            publications {
                maven(MavenPublication) {
                    artifact ear
                }
            }
            repositories {
                maven {
                    name "releases.maven.research.rackspace.com"
                    url "http://maven.research.rackspacecloud.com/content/repositories/releases"
                }
            }
        }
    }

}


project(':core-test-filter') {
    dependencies {
        provided 'javax.servlet:javax.servlet-api:3.1.0'
        provided 'javax:javaee-api:6.0'
    }
}

filterBundleProject(':core-test-filter-bundle', [':core-test-filter'])

project(':second-filter') {
    dependencies {
        provided 'javax.servlet:javax.servlet-api:3.1.0'
        provided 'javax:javaee-api:6.0'
    }
}

filterBundleProject(':second-filter-bundle', [':second-filter'])

filterBundleProject(':busted-application-name-ear', [])

filterBundleProject(':busted-web-fragment-ear', [])

project(':classloader-dependency-one') {
}

project(':classloader-dependency-two') {
}

project(':filter-one') {
    dependencies {
        provided 'javax.servlet:javax.servlet-api:3.1.0'
        provided 'javax:javaee-api:6.0'
        compile 'org.apache.commons:commons-lang3:3.3.2'
        compile project(':classloader-dependency-one')
    }
}

project(':filter-two') {
    dependencies {
        provided 'javax.servlet:javax.servlet-api:3.1.0'
        provided 'javax:javaee-api:6.0'
    }
}

project(':filter-three') {
    dependencies {
        provided 'javax.servlet:javax.servlet-api:3.1.0'
        provided 'javax:javaee-api:6.0'
        compile project(':classloader-dependency-one')
    }
}

project(':filter-four') {
    dependencies {
        provided 'javax.servlet:javax.servlet-api:3.1.0'
        provided 'javax:javaee-api:6.0'
        provided 'org.apache.commons:commons-lang3:3.3.2'
        compile project(':classloader-dependency-one')
    }
}

project(':filter-five') {
    dependencies {
        provided 'javax.servlet:javax.servlet-api:3.1.0'
        provided 'javax:javaee-api:6.0'
        provided 'org.apache.commons:commons-lang3:3.3.2'
        compile project(':classloader-dependency-two')
    }
}

filterBundleProject(':classloader-bundle-one', [':filter-one'])

filterBundleProject(':classloader-bundle-two', [':filter-two'])

filterBundleProject(':classloader-bundle-three', [':filter-three'])

filterBundleProject(':classloader-bundle-four', [':filter-four'])

filterBundleProject(':classloader-bundle-five', [':filter-five'])
