<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book [
    <!-- product name is likely to change; parameterize full name and abbreviation -->
    <!ENTITY PRODNAME "Power API">
    <!ENTITY PRODABBREV "PAPI">
    <!-- Some useful entities borrowed from HTML -->
    <!ENTITY ndash  "&#x2013;">
    <!ENTITY mdash  "&#x2014;">
    <!ENTITY hellip "&#x2026;">

    <!-- Useful for describing APIs -->
    <!ENTITY GET    '<command xmlns="http://docbook.org/ns/docbook">GET</command>'>
    <!ENTITY PUT    '<command xmlns="http://docbook.org/ns/docbook">PUT</command>'>
    <!ENTITY POST   '<command xmlns="http://docbook.org/ns/docbook">POST</command>'>
    <!ENTITY DELETE '<command xmlns="http://docbook.org/ns/docbook">DELETE</command>'>

    <!ENTITY CHECK  '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
        <imageobject>
        <imagedata fileref="img/Check_mark_23x20_02.svg"
        format="SVG" scale="60"/>
        </imageobject>
        </inlinemediaobject>'>

    <!ENTITY ARROW  '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
        <imageobject>
        <imagedata fileref="img/Arrow_east.svg"
        format="SVG" scale="60"/>
        </imageobject>
        </inlinemediaobject>'>
]>
<!-- in BOOK below, add status="draft" to set watermark on cover and left margin -->
<book version="5.0" xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      xmlns:svg="http://www.w3.org/2000/svg"
      xmlns:m="http://www.w3.org/1998/Math/MathML"
      xmlns:html="http://www.w3.org/1999/xhtml"
      xmlns:db="http://docbook.org/ns/docbook" >
    <?rax pdf.url="../../papi-versioning-deploy.pdf"?>
    <title>&PRODNAME; Versioning Component Deployment Handbook</title>
    <!-- set watermark on cover and left margin 
        <?rax status.bar.text="CONFIDENTIAL"?>
    -->
    <?rax title.font.size="35px" subtitle.font.size="16px"?>
    <titleabbrev>&PRODABBREV; Versioning Deployment</titleabbrev>
    <info>
        <author>
            <personname>
                <firstname/>
                <surname/>
            </personname>
            <affiliation>
                <orgname>Rackspace Cloud</orgname>
            </affiliation>
        </author>
        <copyright>
            <year>2010</year>
            <year>2011</year>
            <holder>Rackspace US, Inc.</holder>
        </copyright>
        <releaseinfo>v0.9</releaseinfo>
        <productname>&PRODNAME;</productname>
        <pubdate>2011-09-21</pubdate>
        <legalnotice role="apache2">
            <annotation>
                <remark>Copyright details are filled in by the template.</remark>
            </annotation>
        </legalnotice>
        <abstract>
            <para>This document is intended for systems administrators interested in configuring
                their service to use the Versioning component of the Rackspace Cloud Power
                Application Program Interface (<abbrev>API</abbrev>). </para>
        </abstract>
    </info>
    <chapter xml:id="Overview-d1e85">
        <title>Overview</title>
        <section xml:id="Purpose-d1e90">
            <title>Purpose</title>
            <para>
                The purpose of this handbook is to facilitate deployment of &PRODNAME;'s versioning component. 
                This handbook is not a tutorial.
                It provides basic information that will help you understand and deploy this &PRODNAME; component, but you must adapt this information to suit your own configuration.
            </para>
            <para>
                Versioning enables ReST services to roll out updates and changes without causing end-client breakage.
                A new version of the service API can be released, but clients who are not ready to use the new version can specify a preference for the old version.
                Clients can also request a catalog of available versions; 
                each version in the catalog is marked with a status, such as <code>CURRENT</code> or <code>DEPRECATED</code>, which the client can use for guidance in deciding which version to use.
            </para>
            <para>
                This handbook is focused on one &PRODNAME; component.
                Other &PRODNAME; components are documented in companion handbooks.
            </para>
        </section>
        <section xml:id="Document_Change_History-d1e102">
            <title>Document Change History</title>
            <para>This version of the guide replaces and obsoletes all previous versions.
                The most recent changes are described in the table below: </para>
            <informaltable rules="all">
                <thead>
                    <tr align="center">
                        <td colspan="1">Revision Date</td>
                        <td colspan="4">Summary of Changes</td>
                    </tr>
                </thead>
                <tbody>
                    <tr align="left">
                        <td colspan="1" align="center">Jun 30, 2011</td>
                        <td colspan="4" align="left">
                            <itemizedlist spacing="compact">
                                <listitem>
                                    <para>Initial release.</para>
                                </listitem>
                            </itemizedlist>
                        </td>
                    </tr>
                </tbody>
            </informaltable>
        </section>
        <xi:include href="chapters/available-doc.xml"/>
    </chapter>
    <chapter xml:id="Msg_Enhancement-d1e172">
        <title>Message Enhancement and Routing</title>
        <para> The versioning component does not route requests, nor is it responsible for routing.
            The versioning component's purpose is to annotate incoming requests with their intended
            destination and to describe the available versions to the user. </para>
        <para> The versioning component enhances the incoming request with an HTTP header named
                <code>X-PP-Service-Origin</code>. This header can be used by components further down
            the stack to perform routing. </para>
        <figure xml:id="Overview">
            <title>Overview of PAPI Versioning</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="figures/papi-versioning-overview.png" format="PNG" align="center"/>
                </imageobject>
            </mediaobject>
        </figure>
    </chapter>
    <chapter xml:id="Configuration-d1e365">
        <title>Configuration</title>
        <para>
            These examples of the system model and the versioning configuration are designed to demonstrate all available and configurable options.
        </para>
        <example>
            <title>System Model: XML</title>
            <programlisting language="xml">
<xi:include href="samples/papi-powerproxy-versioning.xml" parse="text"/>
                    </programlisting>
        </example>
        <example>
            <title>Versioning Configuration: XML</title>
            <programlistingco>
                <areaspec>
                    <area xml:id="versioning.xml.service-root" units="linecolumn" coords="5 18"/>
                    <area xml:id="versioning.xml.version-mapping" units="linecolumn" coords="7 21"/>
                    <area xml:id="versioning.xml.id" units="linecolumn" coords="7 24"/>
                    <area xml:id="versioning.xml.pp-host-id" units="linecolumn" coords="7 43"/>
                    <area xml:id="versioning.xml.context-path" units="linecolumn" coords="8 21"/>
                    <area xml:id="versioning.xml.status" units="linecolumn" coords="8 40"/>
                    <area xml:id="versioning.xml.media-types" units="linecolumn" coords="9 21"/>
                    <area xml:id="versioning.xml.atom-links" units="linecolumn" coords="21 19"/>
                </areaspec>
            <programlisting language="xml">
<xi:include href="samples/papi-versioning-versioning.xml" parse="text"/>
            </programlisting>
            </programlistingco>
        </example>
        <para>
        Key elements of the preceding example are labeled with callouts and explained below: 
        </para>
        
        <calloutlist>
            <callout arearefs="versioning.xml.service-root">
                <para>
                    The configuration's service root describes the base URL of the origin service without any versioning information in the URI variant. 
                    This value is used to identify requests against the origin service's resource root as well as construct valid, versioned URIs for the origin service.   
                </para>
                <para> </para>
            </callout>
            <callout arearefs="versioning.xml.version-mapping">
                <para>
                    Version mappings describe the available versions to the requester.
                </para>
                <para>
                    A version mapping must include <code>id</code>, <code>pp-host-id</code>, <code>context-path</code>, <code>status</code>, and <code>media-types</code>.
                </para>
                <para> </para>
            </callout>
            <callout arearefs="versioning.xml.id">
                <para> 
                    <code>id</code>: The ID is responsible for two things. 
                    First, a service version's ID must uniquely identify the version mapping within the configuration:  
                    no two service versions may share the same ID. 
                    In addition, the ID must be the resource variant that follows the service root which identifies this version. 
                    For example, in <code>http://service.api.vendor.com/root/[v1.0/]path/to/resource</code>, the version variant is within square brackets.
                </para>
                <para> </para>
            </callout>
            <callout arearefs="versioning.xml.pp-host-id">
                <para>
                    <code>pp-host-id</code>: The power proxy host ID is used to identify 
                    which power proxy host will answer to versioned requests that match this version mapping. 
                    The power proxy host is defined in the <link linkend="Configuration-d1e365">system model</link>.
                </para>
                <para> </para>
            </callout>
            <callout arearefs="versioning.xml.context-path">
                <para>
                    <code>context-path</code>: The context path attribute is used to indicate that the external mapping for this version, 
                    for example the <code>id</code> attribute, is not the internal mapping.
                    The versioning component will then use this path to route the request to its intended destination.
                </para>
                <para> </para>
            </callout>
            <callout arearefs="versioning.xml.status">
                <para>
                    <code>status</code>: A version mapping's status can be either of four
                    strings: 
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>
                                <code>DEPRECATED</code>
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <code>ALPHA</code>
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <code>BETA</code>
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <code>CURRENT</code>
                            </para>
                        </listitem>
                    </itemizedlist>
                </para>
                <para>
                    This status may be interpreted by the requester without
                    restriction.
                </para>
                <para> </para>
            </callout>
            <callout arearefs="versioning.xml.media-types">
                <para>
                    <code>media-types</code>: A version mapping must describe the types of content it can understand and return. 
                    These media types must include as human-readable attributes both their base type and the complex type.
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>
                                The <firstterm>base type</firstterm> is a MIME type without versioning or vendor information.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                The <firstterm>complex type</firstterm> is a MIME type with versioning and/or vendor information.
                            </para>
                        </listitem>
                    </itemizedlist>
                </para>
                <para>
                    RFC 2046 at <link xlink:href="http://tools.ietf.org/html/rfc2046/">http://tools.ietf.org/html/rfc2046/</link> describes MIME types.
                </para>
                <para> </para>
            </callout>
            <callout arearefs="versioning.xml.atom-links">
                <para>
                    Atom links are used to richly describe any links that are identified in any returned service version. 
                    RFC 4287 
                    at <link xlink:href="http://tools.ietf.org/html/rfc4287/">http://tools.ietf.org/html/rfc4287/</link> 
                    defines the Atom syndication format.
                </para>
                <para> </para>
            </callout>
        </calloutlist>
    </chapter>
    <chapter xml:id="Handling_Requests-d1e431">
        <title>Handling Requests</title>
        <para> Versioning in &PRODNAME; operates on requests in two ways: 
            <itemizedlist
                spacing="compact">
                <listitem>
                    <para> introspection of the HTTP <code>Accept</code> header </para>
                </listitem>
                <listitem>
                    <para> introspection of the URI variant </para>
                </listitem>
            </itemizedlist>
        </para>
        <note>
            <para>
                When both the <code>Accept</code> header and the URI variant are specified, introspection of the URI variant always takes precedence.
            </para>
        </note>   
        <figure xml:id="Normal">
            <title>Normal Handling of Versioning Request</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="figures/papi-versioning-normal.png" format="PNG" align="center"/>
                </imageobject>
            </mediaobject>
        </figure>
        <section xml:id="Complex_MIME-d1e439">
            <title>Complex Request MIME Types</title>
            <para> The versioning component supports two methods of requesting a service version in
                the HTTP request. </para>
            <table frame="all">
                <title>Request Methods</title>
                <?dbfo keep-together="always"?>
                <tgroup cols="2">
                    <colspec colname="c1" colnum="1" colwidth="1.0*"/>
                    <colspec colname="c2" colnum="2" colwidth="1.0*"/>
                    <thead>
                        <row>
                            <entry>Request Method</entry>
                            <entry>Description</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>Complex MIME Type with Vendor Specification</entry>
                            <entry>
                                <para>
                                    In the MIME type for the <code>Accept</code> HTTP header, a
                                    request may specify which <emphasis>vendor namespace</emphasis> it is expecting to
                                    format the response. 
                                </para>
                                <para>
                                    For example, in
                                        <code>application/vnd.rackspace-v1.0+xml</code>, the vendor
                                    namespace has been specified as <code>vnd.rackspace</code> and
                                    version <code>v1.0</code> of the service API has been requested. 
                                </para>
                                <para> Vendor specifications do not modify how the versioning
                                    service routes requests. The information is still parsed and
                                    stored, however, and may be utilized by other components further
                                    down the stack. </para>
                            </entry>
                        </row>
                        <row>
                            <entry>Complex MIME Type with Version Specification</entry>
                            <entry> 
                                <para>
                                    In the MIME type for the <code>Accept</code> HTTP header, a
                                    request may specify which <emphasis>version</emphasis> it is expecting to process the
                                    response. 
                                </para>
                                <para>
                                    For example, in <code>application/v1.0+xml</code>, version
                                        <code>v1.0</code> of the service API has been requested.
                                </para>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
            <section xml:id="Request_Variant-d1e491">
            <title>Request URI Variants</title>
            <para> 
                In addition to <link linkend="Complex_MIME-d1e439">MIME-type introspection</link>, 
                the versioning component supports version tagging via the requested URI variant.
            </para>
            <para> For example, in &GET;
                    /<parameter>root</parameter>/<code>v1.0</code>/<parameter>path</parameter>/<parameter>to</parameter>/<parameter>resource</parameter>
                HTTP/1.1 version <code>v1.0</code> of the service API has been requested. </para> 
            </section>
    </chapter>
    <chapter xml:id="Describing_Versions-d1e531">
        <title>Describing Versions</title>
        <para>
            The versioning component may, upon request, describe all of the available service versions or one particular version.
        </para>
        <figure xml:id="Description">
            <title>Service Versions Catalog as Response to Versioning Request</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="figures/papi-versioning-description.png" format="PNG" align="center"/>
                </imageobject>
            </mediaobject>
        </figure>
        <section xml:id="All_Versions-d1e539">
            <title>Describing All Versions</title>
            <para>
                A requester may request that the versioning component describe all available service versions.
                This is done by requesting the service root without any versioning information in the request.
            </para>            
            <example>
                <title>Describe All Versions Request: XML</title>
                <?dbfo keep-together="always"?>
                <literallayout class="monospaced">
GET /root/ HTTP/1.1
Accept: application/xml
                </literallayout>
            </example>
            <example>
                <title>Service Version Catalog Response: XML</title>
                <programlisting language="xml">
<xi:include href="samples/papi-allversions-response.xml" parse="text"/>
                    </programlisting>
            </example>
        </section>
            <section xml:id="One_Version-d1e547">
                <title>Describing a Single Version</title>
                <para> A requester may request that the versioning component describe a single
                service version by requesting the service root with versioning information on the
                request. The service version's root may be requested in two ways: <itemizedlist
                    spacing="compact">
                    <listitem>
                        <para> via URI variant </para>
                    </listitem>
                    <listitem>
                        <para> via complex MIME type </para>
                    </listitem>
                </itemizedlist>
                </para>
                <para>
                    Below, one example of a request using a URI variant is followed by three examples of requests using complex MIME types.
                </para>
                <example>
                    <title>Describe Single Version Using URI Variant Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <literallayout class="monospaced">
GET /root/v1.0/ HTTP/1.1
Accept: application/xml
                </literallayout>
                </example>
                <example>
                    <title>Describe Single Version Using Complex MIME Type Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <literallayout class="monospaced">
GET /root/ HTTP/1.1
Accept: application/v1.0+xml
                </literallayout>
                </example>
                <example>
                    <title>Describe Single Version Using Complex Parameterized MIME Type Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <literallayout class="monospaced">
GET /root/ HTTP/1.1
Accept: application/vnd.vendor.service;f=2.0;e=xml
                </literallayout>
                </example>
                <example>
                    <title>Describe Single Version Using Namespace in Complex MIME Type Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <literallayout class="monospaced">
GET /root/ HTTP/1.1
Accept: application/vnd.rackspace-v1.0+xml
                </literallayout>
                </example>
                <example>
                    <title>Single Version Response: XML</title>
                    <programlisting language="xml">
<xi:include href="samples/papi-1version-response.xml" parse="text"/>
                    </programlisting>
                </example>                
            </section>
    </chapter>
    <chapter xml:id="Errors-d1e631">
        <title>Handling Errors</title>
        <para>
            If a requester makes a request that cannot be mapped to a valid service version,
            the versioning component will return a 300 (Multiple Choices) as well as a full service version catalog that the requester can then use to make the correct request. 
            The resulting Atom links within the service version catalog will retain the incorrectly-requested resource in an attempt to correctly link the requester to valid, versioned representations.
        </para>
        <figure xml:id="Error">
            <title>Error Handling of Versioning Request</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="figures/papi-versioning-error.png" format="PNG" align="center"/>
                </imageobject>
            </mediaobject>
        </figure>
        <example>
            <title>Unspecified Version Request: XML</title>
            <?dbfo keep-together="always"?>
            <literallayout class="monospaced">
GET /1234/path/to/widget/12 HTTP/1.1
Accept: application/xml
                </literallayout>
        </example>
        <example>
            <title>Multiple Choices Response: XML</title>
            <programlisting language="xml">
<xi:include href="samples/papi-choices-response.xml" parse="text"/>
                    </programlisting>
        </example>
    </chapter>
    <xi:include href="chapters/afterword.xml"/>
</book>