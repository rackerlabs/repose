<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book [
    <!-- Some useful entities borrowed from HTML -->
    <!ENTITY ndash  "&#x2013;">
    <!ENTITY mdash  "&#x2014;">
    <!ENTITY hellip "&#x2026;">

    <!-- Useful for describing APIs -->
    <!ENTITY GET    '<command xmlns="http://docbook.org/ns/docbook">GET</command>'>
    <!ENTITY PUT    '<command xmlns="http://docbook.org/ns/docbook">PUT</command>'>
    <!ENTITY POST   '<command xmlns="http://docbook.org/ns/docbook">POST</command>'>
    <!ENTITY DELETE '<command xmlns="http://docbook.org/ns/docbook">DELETE</command>'>

    <!ENTITY CHECK  '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
        <imageobject>
        <imagedata fileref="img/Check_mark_23x20_02.svg"
        format="SVG" scale="60"/>
        </imageobject>
        </inlinemediaobject>'>

    <!ENTITY ARROW  '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
        <imageobject>
        <imagedata fileref="img/Arrow_east.svg"
        format="SVG" scale="60"/>
        </imageobject>
        </inlinemediaobject>'>
]>
<book version="5.0" status="draft" xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      xmlns:svg="http://www.w3.org/2000/svg"
      xmlns:m="http://www.w3.org/1998/Math/MathML"
      xmlns:html="http://www.w3.org/1999/xhtml"
      xmlns:db="http://docbook.org/ns/docbook" >
    <?rax pdf.url="../../papi-versioning-deploy.pdf"?>
    <title>Rackspace Cloud Power API Rate Limiting Component Deployment Handbook</title>
    <?rax status.bar.text="CONFIDENTIAL"?>
    <?rax title.font.size="35px" subtitle.font.size="20px"?>
    <titleabbrev>RAX Cloud PAPI Rate Limiting Deployment</titleabbrev>
    <info>
        <author>
            <personname>
                <firstname/>
                <surname/>
            </personname>
            <affiliation>
                <orgname>Rackspace Cloud</orgname>
            </affiliation>
        </author>
        <copyright>
            <year>2010</year>
            <year>2011</year>
            <holder>Rackspace US, Inc.</holder>
        </copyright>
        <releaseinfo>API v0.9</releaseinfo>
        <productname>Rackspace Cloud Power API</productname>
        <pubdate>2011-06-15</pubdate>
        <legalnotice role="rs-api">
            <annotation>
                <remark>Copyright details are filled in by the template.</remark>
            </annotation>
        </legalnotice>
        <abstract>
            <para>This document is intended for systems administrators interested in configuring
                their service to use the Rate Limiting component of the Rackspace Cloud Power
                Application Program Interface (<abbrev>API</abbrev>). </para>
        </abstract>
        <cover>
            <para>this is a placeholder for the front cover</para>
        </cover>
        <cover>
            <para>this is a placeholder for the back cover</para>
        </cover>
    </info>
    <chapter xml:id="Overview-d1e85">
        <title>Overview</title>
        <section xml:id="Purpose-d1e90">
            <title>Purpose</title>
            <para> 
                The purpose of this handbook is to facilitate deployment of Power API's rate
                limiting component. This handbook is not a tutorial. It provides basic information
                that will help you understand and deploy this Power API component, but you must
                adapt this information to suit your own configuration. 
            </para>
            <para> 
                The rate limiting service filter protects the origin service from being bombarded
                by client requests. It accomplishes this by specifying limits for the number of
                times a given client may request a given resource. This provides essential
                protection to any public-facing API. 
            </para>
            <para>
                A client's current limits may include the
                client's absolute limits. Absolute limits are specific to a service domain and are
                therefore only provided by the origin service. 
            </para>
            <para>
                This handbook is focused on one Power API component.
                Other Power API components are documented in companion handbooks.
            </para>
        </section>
        <section xml:id="Document_Change_History-d1e102">
            <title>Document Change History</title>
            <para>This version of the guide replaces and obsoletes all previous versions.
                The most recent changes are described in the table below: </para>
            <informaltable rules="all">
                <thead>
                    <tr align="center">
                        <td colspan="1">Revision Date</td>
                        <td colspan="4">Summary of Changes</td>
                    </tr>
                </thead>
                <tbody>
                    <tr align="left">
                        <td colspan="1" align="center">Jul 7, 2011</td>
                        <td colspan="4" align="left">
                            <itemizedlist spacing="compact">
                                <listitem>
                                    <para>Initial release.</para>
                                </listitem>
                            </itemizedlist>
                        </td>
                    </tr>
                </tbody>
            </informaltable>
        </section>
        <section security="writeronly" xml:id="Additional_Resources_REPLACE_WITH_PAPI_CONTENT_-d1e147">
            <title>Additional Resources (REPLACE WITH PAPI CONTENT)</title>
            <annotation>
                <remark>"Additional Resources" is used in other API doc to suggest places to go for
                    help if this document isn't helping enough: contact Cloud Support, check the
                    Knowledge Center, visit the retail site, blogs, twitter, wherever people might
                    be offering help. We don't have any sources like that to offer for Power API
                    support, so this text is included from Load Balancers as an example &amp;
                    reminder; build this section correctly when we have something useful to offer." </remark>
            </annotation>
            <para>You can download the most current version of this document from the Rackspace Cloud website at <link xlink:href="http://docs.rackspacecloud.com/loadbalancers/api/clb-devguide-latest.pdf">
                http://docs.rackspacecloud.com/loadbalancers/api/clb-devguide-latest.pdf</link>. </para>
            <para>For more details about the Rackspace Cloud Load Balancer service, refer to <link xlink:href="http://www.rackspace.com/cloud/cloud_hosting_products/loadbalancers/">http://www.rackspace.com/cloud/cloud_hosting_products/loadbalancers/</link>.
                This site also offers links to Rackspace's official support channels, including
                knowledge base articles, forums, phone, chat, and email. </para>
            <para>You can also follow updates and announcements via twitter at <link xlink:href="http://www.twitter.com/Rackspace">http://www.twitter.com/Rackspace</link>.
            </para>
        </section>
    </chapter>
    <chapter xml:id="Msg_Requirements-d1e172">
        <title>HTTP Message Requirements</title>
        <para> To correctly rate limit a requested resource, the rate limiting component uses one
            required HTTP header precondition and one optional HTTP header precondition. </para>
        <table frame="all">
            <title>HTTP Headers</title>
            <tgroup cols="2">
                <colspec colname="c1" colnum="1" />
                <colspec colname="c2" colnum="2" />
                <thead>
                    <row>
                        <entry>Header</entry>
                        <entry>Purpose</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry><code>X-PP-User</code></entry>
                        <entry><code>X-PP-User</code> is a single string value header. This header is used to
                            describe the unique name of the client making the request. This name is
                            used in part to cache and store request hits.</entry>
                    </row>
                    <row>
                        <entry><code>X-PP-Groups</code></entry>
                        <entry><code>X-PP-Groups</code> is a string value list header. This header is used to
                            describe all of the limit groups the client belongs to. A client may
                            belong to multiple limit groups or to none.</entry>
                    </row>
                    <row>
                        <entry/>
                        <entry/>
                    </row>
                </tbody>
            </tgroup>
        </table>
    </chapter>
    <chapter xml:id="Configuration-d1e365">
        <title>Configuration</title>
        <para> The rate limiting component sources its configuration from a file named
                <code>rate-limiting.xml</code>. </para>
        <example>
            <title>Rate Limiting Configuration: XML</title>
            <programlisting language="xml">
<xi:include href="samples/papi-ratelimit.xml" parse="text"/>
                    </programlisting>
        </example>        
        <section xml:id="Setting_Active_Limits-d1e373">
            <title>Setting Active Limits</title>
            <para>
                The API endpoint is specified in <code>rate-limiting.xml</code>.
            </para>
                <itemizedlist> 
                <listitem>
                <para> 
                    The <code>limits-request-endpoint</code> configuration element must specify a
                    regex that identifies client requests for the client's currently active limits. 
                </para>
                </listitem>
                <listitem>
                <para>
                    The <code>uri-regex</code> attribute should be a regular expression that matches all request resource representations that the rate limiting component should answer.
                </para>
                </listitem>
                <listitem>
                <para>
                    Optionally, <code>include-absolute-limits</code> is a Boolean attribute that can be used to switch on or off absolute limits integration.
                </para>
                </listitem>
                </itemizedlist>  
         </section>
        <section xml:id="Configuring_Limits-d1e376">
            <title>Configuring Limits</title>
            <table frame="all">
                <title>Configuring Limits</title>
                <tgroup cols="3">
                    <colspec colname="c1" colnum="1" />
                    <colspec colname="c2" colnum="2" />
                    <colspec colname="c3" colnum="3" />
                    <thead>
                        <row>
                            <entry>Attribute</entry>
                            <entry>Description</entry>
                            <entry>Acceptable Values</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry><code>uri</code></entry>
                            <entry>The <code>uri</code> attribute of a given limit should be a
                                human-readable representation of the regular expression used to
                                match this limit. The URI is useful for client end-user interfaces
                                as well as for documentation purposes.</entry>
                            <entry/>
                        </row>
                        <row>
                            <entry><code>uri-regex</code></entry>
                            <entry>The <code>uri-regex</code> attribute should be a regular
                                expression that matches all request resource representations to
                                which the given limit should apply.</entry>
                            <entry/>
                        </row>
                        <row>
                            <entry><code>http-methods</code></entry>
                            <entry>Limits can trigger on specific HTTP methods. These trigger
                                methods must be specified by the <code>http-methods</code>
                                attribute. As the name implies, the attribute may contain more than
                                one value; multiple values are delimited by spaces. The rate
                                limiting component supports all valid HTTP methods as described by
                                RFC 2616 at 
                                <link xlink:href="http://www.ietf.org/rfc/rfc2616.txt">http://www.ietf.org/rfc/rfc2616.txt</link>.
                                If the configuration
                                specifies <code>ALL</code> for the <code>http-methods</code>
                                attribute, this informs the rate limiting component that rate
                                limiting should occur on all HTTP requests. </entry>
                            <entry>GET, DELETE, POST, PUT, HEAD, TRACE, OPTIONS, CONNECT,
                                ALL</entry>
                        </row>
                        <row>
                            <entry><code>unit</code></entry>
                            <entry>Every limit must specify a time unit specified by the
                                    <code>unit</code> attribute. The valid values for this attribute
                                are also enumerated in the OpenStack limits XML schema XSD file at
                                <link xlink:href="http://docs.openstack.org/common/api/v1.0">http://docs.openstack.org/common/api/v1.0</link>.
                            </entry>
                            <entry>SECOND, MINUTE, HOUR, DAY</entry>
                        </row>
                        <row>
                            <entry><code>value</code></entry>
                            <entry>A limit's <code>value</code> attribute is an integer which
                                describes the number of requests the limit allows. In combination
                                with the <code>unit</code> attribute, the number of requests within
                                a slice of time describes the rate for the given limit. The rate is
                                then used to perform rate limiting.</entry>
                            <entry/>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section xml:id="Configuring_Limit_Groups-d1e374">
            <title>Configuring Limit Groups</title>
            <para> 
                Limit groups identify a group of related rate limits and bind them to a series of
                names. The names can be used to limit incoming requests using the
                <code>X-PP-Groups</code> header. 
            </para>
            <para>
                A single limit group may be defined as the default. This default
                will handle any requests that cannot be matched on the basis of a group name to any of the groups
                identified in the <code>X-PP-Groups</code> header.
            </para>
        </section>
        <section xml:id="Constructing_Cache_Keys-d1e378">
            <title>Constructing Cache Keys</title>
            <para> 
                The rate limiting component must be able to track active rate limits per resource. 
                To effectively facilitate this, the rate limiting component attempts to generate a cache key from the limit's regular expression,
                as defined in its <code>uri-regex</code> attribute. 
                Extracting cache keys from the regular expression is performed via regular expression capture groups. 
            </para>
            <para>
                If no capture groups are specified, then the entire request URI is used as a the cache key for the request. 
                This is considered sub-optimal in most cases, since each unique resource representation will have requests made against it tracked separately.
            </para>
            <important>
                <para>
                    Keep in mind that query parameters as well as other request URI components ARE included as part of the request URI 
                    that the rate limiting component operates against and should be considered when constructing your regular expressions.
                </para>
            </important>
            <para>
                Consider the following regular expression: <code>/service/.*</code>
            </para>
            <para>
                This is a blanket regular expression that will catch any request against a resource that falls under the parent resource, <code>service</code>. 
                Because the rate limiting component cannot detect whether the service implementer is requesting 
                that each resource request be tracked separately or as part of a group, the component defaults to tracking limited requests under unique keys.
            </para>
            <para>
                Consider the following regular expression: <code>/service/([^!*'();:@=+$,/?#\\[\\]]*)/.*</code>
            </para>
            <para>
                This regular expression generates cache keys from the second-tier resource in a given request URI. 
                This is useful for grouping child resources under a shared rate limit.
            </para>
            <note>
                <para>
                    Service implementers should use capture groups in their regular expressions. 
                    In addition, the performance of the regular expression should be taken into consideration when designing limits. 
                    This is because a given expression's performance has a direct impact on the rate limiting component's performance and throughput.
                </para>
            </note>
        </section>        
    </chapter>
    <chapter xml:id="Recording_Requests-d1e431">
        <title>Recording Client Requests</title>
        <para> 
            The rate limiting component must be able to both record request usage on a per-limit
            basis and recall all stored limits that belong to a named client.  
            The <code>X-PP-User</code> is used for this purpose. 
        </para>
        <section xml:id="Cache_Indexing-d1e439">
        <title>Cache Indexing</title>
        <para> 
            The caching format for the rate limiting component is designed for high throughput. 
            Because of this, an aggregation index is required to group active rate
            limits to a named client. 
        </para>
        <para>
                The rate limiting component indexes stored limit cache
                keys in a separate cached object for each named client identified the <code>X-PP-User</code> HTTP
                header. 
                This data structure is called the user limit key lookaside. 
                This index is needed to maintain O(1) logic to use a cache key to get cached limits. 
                Without this index, acquiring a cached limit would require either
                more complex &GET; logic or caching logic that is not easily scalable.
        </para>
        <para>
            The string value of the X-PP-User HTTP header is treated as the cache key for this index.   
        </para>
        <note>
            <para>
                This index is not updated for every cache &PUT;. 
                The index is updated when a new cache object for a limit is inserted.
                When an existing cache object is updated, the index is not updated.
            </para>
        </note>
        </section>
        <section xml:id="Single_Node-d1e447">
            <title>Single-Node Installation</title>
               <para> The rate limiting component supports a single-node Power API installation in
                which all cache operations are performed locally. Power API's default local
                datastore is used when no other nodes are identified in the system model as hosting
                a rate limiting component. </para>
        </section>
            <section xml:id="Multi-Node-d1e470">
                <title>Multi-Node Installation</title>
                <para> The rate limiting component supports multiple-node Power API installations
                via Power API's datastore service. If a clustered datastore is available, the
                component will make use of it. The rate limiting component only currently supports
                discovery of Power API's default hash-ring clustered datastore. </para>
            </section>
    </chapter>
    <chapter xml:id="Requesting_Limits-d1e531">
        <title>Requesting Active Limits</title>
        <para>
            A client may request from the rate limiting component their currently active rate and or absolute limits.
        </para>
        <para>
            Valid accept types are:
            <itemizedlist spacing="compact">
                <listitem>
                    <para>application/xml</para>
                </listitem>
                <listitem>
                    <para>application/json</para>
                </listitem>
                <listitem>
                    <para>application/vnd.vendor.service-v1+xml</para>
                </listitem>
                <listitem>
                    <para>application/vnd.vendor.service;f=2;e=xml</para>
                </listitem>
            </itemizedlist>
        </para>
        <table frame="all">
            <title>Sample Request/Response Conversation: Request Limits</title>
            <tgroup cols="2">
                <colspec colname="c1" colnum="1" />
                <colspec colname="c2" colnum="2" />
                <thead>
                    <row>
                        <entry>Request</entry>
                        <entry>Response</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>
                            <programlisting>
GET /service/limits HTTP/1.1 
Accept: application/vnd.rackspace-v1.0+xml 
X-PP-User: username 
X-PP-Groups: customer
                                </programlisting>
                        </entry>
                        <entry/>
                    </row>
                    <row>
                        <entry/>
                        <entry>
                            <informalexample>
                                <literallayout class="monospaced">
HTTP/1.1 200 OK
Content-Length: 538
                </literallayout>
                            </informalexample>
                            <informalexample>
                                <programlisting language="xml">
<xi:include href="samples/papi-ratelimit-response.xml" parse="text"/>
                    </programlisting>
                            </informalexample>
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
    </chapter>
    <chapter xml:id="Absolute-d1e631">
        <title>Integrating Absolute Limits</title>
        <para> 
            The rate limiting component is designed to integrate with limits that are returned as
            a response from the origin service. These limits are absolute and are specific to a
            service domain. 
        </para>
        <para>
            To activate inclusion of absolute limits that are specific to a client's origin service, the optional configuration attribute, `include-absolute-limits`, may be used.
        </para>
        <para>
            When `include-absolute-limits` is set to true, the rate limiting component marks incoming requests that match the the limit request endpoint's `uri-regex` 
            and then passes them down to the origin service. 
            After the origin service responds with the client's absolute limits, 
            the rate limiting component enhances the response with the combined absolute and active rate limits. It then sends the response to the client.
        </para>
    </chapter>
    <chapter xml:id="Limited-d1e731">
        <title>Handling Limited Client Requests</title>
        <para> When a client makes a request that exceeds the client's specified rate limit, the
            rate limiting component will return the HTTP response code 413 (Request Entity Too
            Large). 
        </para> 
        <para>
            HTTP Header: Retry-After
        </para>
            <table frame="all">
                <title>Sample Request/Response Conversation: Rate Exceeded</title>
                <tgroup cols="2">
                    <colspec colname="c1" colnum="1" />
                    <colspec colname="c2" colnum="2" />
                    <thead>
                        <row>
                            <entry>Request</entry>
                            <entry>Response</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>
                                <programlisting>
GET /service/my/resource HTTP/1.1 
Accept: application/vnd.rackspace-v1.0+xml 
X-PP-User: username 
X-PP-Groups: customer
                                </programlisting>
                            </entry>
                            <entry/>
                        </row>
                        <row>
                            <entry/>
                            <entry>
                                <programlisting>
HTTP/1.1 413 Request Entity Too Large
Retry-After: Thu, 30 Jun 2011 20:24:39 GMT
                                </programlisting>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
    </chapter>
</book>
