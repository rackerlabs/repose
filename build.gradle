buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url "https://maven.research.rackspacecloud.com/content/groups/aggregate/"
        }
    }

    dependencies {
        classpath 'org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:1.2.0'
        classpath 'com.netflix.nebula:nebula-dependency-recommender:3.1.0'
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:3.0.3'
        classpath 'org.openrepose:gradle-jaxb-plugin:2.1.0'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
        classpath 'org.github.ngbinh.scalastyle:gradle-scalastyle-plugin_2.10:0.8.2' //todo: this will need to be changed when we switch to scala 2.11
        classpath 'gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.12.1'
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:1.2'
    }
}

apply plugin: 'org.sonarqube'


ext.reposeCodename = "Ezio?"

allprojects {
    group = 'org.openrepose'
    version = '8.0.0.0'

    apply plugin: 'idea'
    apply plugin: 'nebula.dependency-recommender'


    repositories {
        mavenCentral()
        maven {
            url "https://maven.research.rackspacecloud.com/content/groups/aggregate/"
        }
    }
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'scala'
    apply plugin: 'org.unbroken-dome.test-sets'
    apply plugin: 'nebula.provided-base'
    apply plugin: 'org.openrepose.gradle.plugins.jaxb'
    apply plugin: 'checkstyle'
    apply plugin: 'codenarc'
    apply plugin: 'scalaStyle'
    apply plugin: 'com.github.hierynomus.license'
    apply plugin: 'jacoco'

    dependencies {
        jaxb "com.sun.xml.bind:jaxb-xjc"
        jaxb "com.sun.xml.bind:jaxb-impl"
        jaxb "javax.xml.bind:jaxb-api"
        jaxb "org.jvnet.jaxb2_commons:jaxb2-basics-ant"
    }

    testSets {
        integrationTest
    }

    check.dependsOn integrationTest
    integrationTest.mustRunAfter test

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    task transformXSDs() {
        description "Runs xml through an xslt transfurm"
        ext.outputDir = "$buildDir/src/generated-xsd"
        //todo: make this work with multiples so i can make these paths better
        def xsltFile = "$rootDir/repose-aggregator/src/config/xsl/remove-1.1-elements.xsl"
        def schemaBaseDir = "$projectDir/src/main/resources/META-INF/schema"

        //If they set a property for the jaxbXSLT file override our default
        if (project.hasProperty('jaxbXsltFile')) {
            xsltFile = project.jaxbXsltFile
        }

        if (project.hasProperty('jaxbSchemaBase')) {
            schemaBaseDir = project.jaxbSchemaBase
        }

        inputs.files(
                fileTree(dir: schemaBaseDir, includes: ["**/*.xsd", "**/*.xjb"]),
                file(xsltFile)
        )
        outputs.dir outputDir

        doLast {
            file(outputDir).mkdirs()

            //Find all XSDs in the src/main/resources/META-INF.schema
            if (file(xsltFile).exists() && file(schemaBaseDir).exists()) {
                logger.lifecycle("Transforming Schemas")
                ant.xslt(
                        extension: '.xsd',
                        basedir: schemaBaseDir,
                        includes: "**/*.xsd",
                        style: xsltFile,
                        destdir: "${outputDir}"
                )
            } else {
                logger.lifecycle("NOT Transforming Schemas")
                copy {
                    from schemaBaseDir
                    into outputDir
                    include "**/*.xsd"
                }
            }

            //Copy over any bindings.xjb into their appropriate directories
            logger.lifecycle("Copying xjb's")
            copy {
                from schemaBaseDir
                into outputDir
                include "**/*.xjb"
            }
        }
    }

    def generatedDir = "${buildDir}/src/generated-sources"

    jaxb {
        xsdDir transformXSDs.outputDir
        bindingsDir = transformXSDs.outputDir
        xjc {
            destinationDir = generatedDir
        }
    }

    xjc.dependsOn transformXSDs

    sourceSets {
        generated {
            java {
                srcDirs += generatedDir
            }
        }
        main {
            java {
                compileClasspath += generated.output
                runtimeClasspath += generated.output
            }
            output.dir(sourceSets.generated.output.classesDir, builtBy: 'compileGeneratedJava')
        }
    }

    [JavaCompile, ScalaCompile, GroovyCompile].collect { type ->
        tasks.withType(type) {
            dependsOn('xjc')
        }
    }

    configurations {
        compile.exclude group: 'commons-logging', module: 'commons-logging'

        testCompile.exclude group: 'xerces', module: 'xerces'
    }

    //todo: remove old location for these files
    checkstyle {
        configFile = file("$rootDir/repose-aggregator/src/config/styles/checkstyle.xml")
        sourceSets = sourceSets.matching {it.name != 'generated'}
    }

    codenarc {
        configFile = file("$rootDir/repose-aggregator/src/config/styles/codenarc.xml")
    }

    //todo: write a good one of these plugins, because this is garbage
    scalaStyle {
        configLocation = "$rootDir/repose-aggregator/src/config/styles/scalastyle_config.xml"
        includeTestSourceDirectory = true
        source = "src/main/scala"
        testSource = "src/test/scala"
        failOnWarning = true
    }

    check.dependsOn scalaStyle

    license {
        header file("$rootDir/repose-aggregator/src/config/license/LICENSE.txt")
        mapping {
            scala = 'SLASHSTAR_STYLE'
        }
        exclude "**/*.cfg.xml"
        exclude "**/log4j2*.xml"
        sourceSets = sourceSets.matching {it.name != 'generated'}
    }

    //todo: for some reason jacoco freaks when we do clean and build together
    jacoco {
        toolVersion = "0.7.6.201602180812"
    }

    test {
        jacoco {
            destinationFile = file("$rootDir/repose-aggregator/build/jacoco/jacocoTest.exec")
        }
    }

    integrationTest {
        jacoco {
            destinationFile = file("$rootDir/repose-aggregator/build/jacoco/jacocoIntegrationTest.exec")
        }
        systemProperty 'jacocoArguments', jacoco.getAsJvmArg()
    }

    idea {
        module {
            generatedSourceDirs += file("$generatedDir")
            testSourceDirs += project.sourceSets.integrationTest.allSource.srcDirs.flatten()
            scopes.TEST.plus += [configurations.integrationTestCompile]
        }
    }
}

dependencyRecommendations {
    propertiesFile file: file('versions.properties')
}

sonarqube {
    properties {
        property "sonar.dynamicAnalysis", "reuseReports"
        property "sonar.jacoco.reportPath", "$rootDir/repose-aggregator/build/jacoco/jacocoTest.exec"
        property "sonar.jacoco.itReportPath", "$rootDir/repose-aggregator/build/jacoco/jacocoIntegrationTest.exec"
    }
}
