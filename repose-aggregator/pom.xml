<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.openrepose</groupId>
        <artifactId>repose</artifactId>
        <version>8.0.0.0-SNAPSHOT</version>
    </parent>

    <name>Repose - Build Support Profiles</name>
    <artifactId>profile-support</artifactId>
    <packaging>pom</packaging>

    <description>
        Aggregator of all Repose source modules. Provides common dependency versions
        used by source modules.
    </description>

    <properties>
        <scala.major>2</scala.major>
        <scala.minor>11</scala.minor>
        <scala.patch>7</scala.patch>
        <scala.MajDotMin>${scala.major}.${scala.minor}</scala.MajDotMin>
        <org.springframework.version>4.1.4.RELEASE</org.springframework.version>
        <groovy.version>2.1.3</groovy.version>
        <spock.version>0.7-groovy-2.0</spock.version>
        <gmaven.version>1.5</gmaven.version>
        <akka.version>2.3.12</akka.version>
        <powermock.version>1.5.4</powermock.version>
        <jersey.version>1.19</jersey.version>
        <jackson.version>2.4.0</jackson.version>
        <yammer.version>2.2.0</yammer.version>
        <log4j.version>2.3</log4j.version>
        <jetty.version>9.2.0.v20140526</jetty.version>
        <jacoco.version>0.7.5.201505241946</jacoco.version>
        <!-- NOTE: the saxon version should match that of API-checker, because there is saxon in core :( -->
        <saxon.version>9.4.0.9</saxon.version>
        <sonar.dynamicAnalysis>reuseReports</sonar.dynamicAnalysis>
        <sonar.jacoco.itReportPath>
            ${project.basedir}/repose-aggregator/functional-tests/spock-functional-test/target/jacoco-it.exec
        </sonar.jacoco.itReportPath>
        <api.checker.version>2.0.0-SNAPSHOT</api.checker.version>
    </properties>

    <modules>
        <module>external</module>
        <module>commons</module>
        <module>core</module>
        <module>components</module>
        <module>installation</module>
        <module>artifacts</module>
        <module>functional-tests</module>
    </modules>

    <repositories>
        <!-- this repository is necessary for the play-json library < 3.0 It's not in maven central -->
        <repository>
            <id>typesafe</id>
            <name>typesafe-releases</name>
            <url>http://repo.typesafe.com/typesafe/maven-releases</url>
        </repository>
    </repositories>

    <dependencyManagement>
        <dependencies>
            <!--For Javax Library Support support-->
            <dependency>
                <groupId>org.glassfish</groupId>
                <artifactId>javax.servlet</artifactId>
                <version>3.1</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>javax.mail</groupId>
                <artifactId>mail</artifactId>
                <version>1.4.4</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>javax</groupId>
                <artifactId>javaee-web-api</artifactId>
                <version>6.0</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>javax</groupId>
                <artifactId>javaee-api</artifactId>
                <version>6.0</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>javax.transaction</groupId>
                <artifactId>transaction-api</artifactId>
                <version>1.1</version>
                <scope>provided</scope>
            </dependency>

            <!--For Spring Framework support-->
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-core</artifactId>
                <version>${org.springframework.version}</version>
                <exclusions>
                    <exclusion>
                        <groupId>commons-logging</groupId>
                        <artifactId>commons-logging</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-beans</artifactId>
                <version>${org.springframework.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-context</artifactId>
                <version>${org.springframework.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-web</artifactId>
                <version>${org.springframework.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-test</artifactId>
                <version>${org.springframework.version}</version>
                <scope>test</scope>
            </dependency>

            <!--For Jersey RESTful Services Communication support-->
            <dependency>
                <groupId>com.sun.jersey</groupId>
                <artifactId>jersey-client</artifactId>
                <version>${jersey.version}</version>
            </dependency>
            <dependency>
                <groupId>com.sun.jersey</groupId>
                <artifactId>jersey-server</artifactId>
                <version>${jersey.version}</version>
            </dependency>
            <dependency>
                <groupId>com.sun.jersey.test.framework</groupId>
                <artifactId>jersey-test-framework</artifactId>
                <version>1.0.3.1</version>
                <scope>test</scope>
            </dependency>

            <!--
            For JSON support
            TODO: codehaus.jackson is super old! We should be using com.fasterxml.jackson stuff. It's different though
            -->
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-annotations</artifactId>
                <version>${jackson.version}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-core</artifactId>
                <version>${jackson.version}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-databind</artifactId>
                <version>${jackson.version}</version>
            </dependency>
            <dependency>
                <groupId>com.github.fge</groupId>
                <artifactId>json-schema-validator</artifactId>
                <version>2.1.7</version>
            </dependency>

            <!--For apache httpclient support-->
            <dependency>
                <groupId>org.apache.httpcomponents</groupId>
                <artifactId>httpclient</artifactId>
                <version>4.4.1</version>
                <exclusions>
                    <exclusion>
                        <groupId>commons-codec</groupId>
                        <artifactId>commons-codec</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>commons-logging</groupId>
                        <artifactId>commons-logging</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>

            <!-- this replaces all commons-logging, but has to be manually added to each project that wants logging:( -->
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>jcl-over-slf4j</artifactId>
                <version>1.7.7</version>
            </dependency>

            <!--Akka support-->
            <dependency>
                <groupId>com.typesafe.akka</groupId>
                <artifactId>akka-actor_${scala.MajDotMin}</artifactId>
                <version>${akka.version}</version>
            </dependency>

            <!-- TODO: make sure this doesn't conflict with akka, because it'll be in the same class path -->
            <dependency>
                <groupId>com.typesafe</groupId>
                <artifactId>config</artifactId>
                <!-- not using the same version as akka, as it has bugs that are fixed in 1.2.1 -->
                <!-- specifically around quoting of strings -->
                <version>1.2.1</version>
            </dependency>


            <dependency>
                <groupId>commons-io</groupId>
                <artifactId>commons-io</artifactId>
                <version>2.4</version>
            </dependency>
            <dependency>
                <groupId>commons-codec</groupId>
                <artifactId>commons-codec</artifactId>
                <version>1.10</version>
            </dependency>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>3.3.2</version>
            </dependency>

            <dependency>
                <groupId>net.sf.ehcache</groupId>
                <artifactId>ehcache-core</artifactId>
                <version>2.6.0</version>
            </dependency>

            <dependency>
                <groupId>com.yammer.metrics</groupId>
                <artifactId>metrics-core</artifactId>
                <version>${yammer.version}</version>
            </dependency>

            <dependency>
                <groupId>com.yammer.metrics</groupId>
                <artifactId>metrics-graphite</artifactId>
                <version>${yammer.version}</version>
            </dependency>

            <dependency>
                <groupId>com.yammer.metrics</groupId>
                <artifactId>metrics-ehcache</artifactId>
                <version>${yammer.version}</version>
            </dependency>

            <dependency>
                <groupId>xml-apis</groupId>
                <artifactId>xml-apis</artifactId>
                <version>2.0.2-rax</version>
            </dependency>

            <!-- saxon keeps sneaking into all the things because xml -->
            <dependency>
                <groupId>net.sf.saxon</groupId>
                <artifactId>saxon</artifactId>
                <version>${saxon.version}</version>
            </dependency>

            <dependency>
                <groupId>net.sf.saxon</groupId>
                <artifactId>saxon-ee</artifactId>
                <version>${saxon.version}</version>
            </dependency>

            <dependency>
                <groupId>xerces</groupId>
                <artifactId>xerces-xsd11</artifactId>
                <version>2.12.0-rax</version>
            </dependency>

            <dependency>
                <groupId>org.jvnet.jaxb2_commons</groupId>
                <artifactId>jaxb2-basics-runtime</artifactId>
                <version>0.6.3</version>
            </dependency>

            <!-- For Scala! -->
            <dependency>
                <groupId>org.scala-lang</groupId>
                <artifactId>scala-library</artifactId>
                <version>${scala.MajDotMin}.${scala.patch}</version>
            </dependency>

            <dependency>
                <groupId>org.scalatest</groupId>
                <artifactId>scalatest_${scala.MajDotMin}</artifactId>
                <version>2.2.0</version>
                <scope>test</scope>
            </dependency>

            <!-- For Scala Lazy Logging! -->
            <dependency>
                <groupId>com.typesafe.scala-logging</groupId>
                <artifactId>scala-logging-slf4j_${scala.MajDotMin}</artifactId>
                <version>2.1.2</version>
            </dependency>

            <!-- this gets us the nice play-json support -->
            <dependency>
                <groupId>com.typesafe.play</groupId>
                <artifactId>play-json_${scala.MajDotMin}</artifactId>
                <version>2.3.4</version>
            </dependency>


            <!-- For Joda Time support -->
            <dependency>
                <groupId>joda-time</groupId>
                <artifactId>joda-time</artifactId>
                <version>2.7</version>
            </dependency>

            <!--For SLF4J/Log4J 2.x logging support-->
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-api</artifactId>
                <version>1.7.7</version>
            </dependency>
            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-slf4j-impl</artifactId>
                <version>${log4j.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-api</artifactId>
                <version>${log4j.version}</version>
            </dependency>

            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-core</artifactId>
                <version>${log4j.version}</version>
            </dependency>

            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-jul</artifactId>
                <version>${log4j.version}</version>
            </dependency>

            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-iostreams</artifactId>
                <version>${log4j.version}</version>
            </dependency>

            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-core</artifactId>
                <type>test-jar</type>
                <version>${log4j.version}</version>
                <scope>test</scope>
            </dependency>

            <!--Apache Pool Support-->
            <dependency>
                <groupId>commons-pool</groupId>
                <artifactId>commons-pool</artifactId>
                <version>1.6</version>
            </dependency>

            <dependency>
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <version>18.0</version>
            </dependency>

            <!-- Handy jetbrains annotations for use in the IDE, doesn't hurt anything else -->
            <dependency>
                <groupId>org.jetbrains</groupId>
                <artifactId>annotations</artifactId>
                <version>13.0</version>
                <scope>test</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>

        <!-- nearly everything uses slf4j-api -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>


        <!-- We like Spock, test long and prosper -->
        <dependency>
            <groupId>org.codehaus.groovy</groupId>
            <artifactId>groovy-all</artifactId>
            <version>${groovy.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.spockframework</groupId>
            <artifactId>spock-core</artifactId>
            <version>${spock.version}</version>
            <scope>test</scope>
        </dependency>

        <!--For unit testing-->
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-all</artifactId>
            <version>1.9.5</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-module-junit4</artifactId>
            <version>${powermock.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-api-mockito</artifactId>
            <version>${powermock.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- Mockrunner for mock Servlet classes -->
        <dependency>
            <groupId>com.mockrunner</groupId>
            <artifactId>mockrunner-servlet</artifactId>
            <version>1.0.0</version>
            <exclusions>
                <exclusion>
                    <groupId>commons-logging</groupId>
                    <artifactId>commons-logging</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.apache.tomcat</groupId>
                    <artifactId>servlet-api</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>xerces</groupId>
                    <artifactId>xercesImpl</artifactId>
                </exclusion>
            </exclusions>
            <scope>test</scope>
        </dependency>

        <!--For hamcrest matcher support-->
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-all</artifactId>
            <version>1.3</version>
            <scope>test</scope>
        </dependency>

        <!--todo: Ugh utilities really needs these? -->
        <dependency>
            <groupId>org.glassfish</groupId>
            <artifactId>javax.servlet</artifactId>
        </dependency>
        <dependency>
            <groupId>javax</groupId>
            <artifactId>javaee-web-api</artifactId>
        </dependency>

        <!--For Javax Library Support-->
        <dependency>
            <groupId>javax.transaction</groupId>
            <artifactId>transaction-api</artifactId>
        </dependency>

        <!-- because we do test logging in many projects, all projects get the log4j test dependencies -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <type>test-jar</type>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <profiles>
        <profile>
            <!-- this profile works with gnupg 2.0.x NOT with 2.1.x -->
            <id>release-sign-artifacts</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <gpg.keyname>E7C89BBB</gpg.keyname>
                <gpg.passphrase>${env.GPG_PASSPHRASE}</gpg.passphrase>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-gpg-plugin</artifactId>
                        <version>1.6</version>
                        <executions>
                            <execution>
                                <id>sign-artifacts</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>sign</goal>
                                </goals>
                                <configuration>
                                    <!-- other linuxes reference gpg2 for the 2.0 version of gpg -->
                                    <executable>gpg2</executable>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <!-- this profile is for gpg 2.1.x -->
            <id>gpg2.1-sign-artifacts</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <gpg.keyname>E7C89BBB</gpg.keyname>
                <gpg.passphrase>${env.GPG_PASSPHRASE}</gpg.passphrase>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-gpg-plugin</artifactId>
                        <version>1.6</version>
                        <executions>
                            <execution>
                                <id>sign-artifacts</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>sign</goal>
                                </goals>
                                <configuration>
                                    <!-- other linuxes reference gpg2 for the 2.0 version of gpg -->
                                    <executable>gpg2</executable>
                                    <!-- These arguments only work on gnupg 2.1.x ! ARGH -->
                                    <gpgArguments>
                                        <arg>--pinentry-mode</arg>
                                        <arg>loopback</arg>
                                    </gpgArguments>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <!--
            This profile is used to upload for veracode scan includes
            - pre-scan
            - actual scan
            -P upload-veracode-static-scan clean verify
        -->
        <profile>
            <id>upload-veracode-static-scan</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.gmaven</groupId>
                        <artifactId>gmaven-plugin</artifactId>
                        <version>${gmaven.version}</version>
                        <inherited>false</inherited>
                        <dependencies>
                            <dependency>
                                <groupId>com.rackspace.api.clients</groupId>
                                <artifactId>veracode-client</artifactId>
                                <version>1.3</version>
                            </dependency>
                            <dependency>
                                <groupId>org.codehaus.groovy.modules.http-builder</groupId>
                                <artifactId>http-builder</artifactId>
                                <version>0.7</version>
                            </dependency>
                            <dependency>
                                <groupId>org.apache.httpcomponents</groupId>
                                <artifactId>httpclient</artifactId>
                                <version>4.3.3</version>
                            </dependency>
                            <dependency>
                                <groupId>org.apache.httpcomponents</groupId>
                                <artifactId>httpcore</artifactId>
                                <version>4.3.3</version>
                            </dependency>
                        </dependencies>
                        <executions>
                            <execution>
                                <phase>verify</phase>
                                <goals>
                                    <goal>execute</goal>
                                </goals>
                                <configuration>
                                    <providerSelection>2.0</providerSelection>
                                    <source>
                                        import com.rackspace.api.clients.veracode.DefaultVeracodeApiClient
                                        import groovy.util.AntBuilder
                                        import groovyx.net.http.HTTPBuilder
                                        import static groovyx.net.http.Method.*
                                        import static groovyx.net.http.ContentType.*
                                        import org.apache.http.entity.mime.MultipartEntity
                                        import org.apache.http.entity.mime.HttpMultipartMode
                                        import org.apache.http.entity.mime.FormBodyPart;
                                        import org.apache.http.entity.mime.content.StringBody
                                        import org.apache.http.entity.mime.content.FileBody
                                        import groovyx.net.http.*

                                        def client = new DefaultVeracodeApiClient("https://analysiscenter.veracode.com/api/", '${veracode.username}', '${veracode.password}', System.out)
                                        def version = project.version
                                        def upload_file = '${file.upload}'
                                        def application = '${repose.application}'
                                        def project_dir = '${project.basedir}'
                                        def copy_file = upload_file - '.ear'

                                        def uploadFile = new File(project_dir + upload_file)
                                        def copyFile = new File(project_dir + upload_file)
                                        if (upload_file.contains(".ear")){
                                            copyFile = new File('${project.basedir}' + copy_file + "-" + version +".ear")
                                        }
                                        println "Actual Upload File: "+copyFile

                                        // workaround for the veracode-client-java not taking buildVersion as String
                                        def buildVersion = version - '-SNAPSHOT'
                                        buildVersion = buildVersion.replaceAll('\.','') + '${build.number}'
                                        println "Uploading artifacts with version: " + buildVersion
                                        def buildVersionInt = buildVersion.toInteger()

                                        // workaround for veracode wanting the same filename for each scan
                                        new AntBuilder().copy(file:copyFile.canonicalPath, tofile:uploadFile.canonicalPath)
                                        def appId = client.getAppId(application)
                                        println "AppId = " + appId
                                        println "build Info: "+buildVersionInt+","+ uploadFile.toString()
                                        //new AntBuilder().delete(file:uploadFile.canonicalPath)

                                        // workaround for the java client not making HTTP call to beginscan.do
                                        def http = new HTTPBuilder("https://analysiscenter.veracode.com/api/")
                                        http.auth.basic '${veracode.username}', '${veracode.password}'

                                        println "Submitting /api/4.0/uploadfile.do"
                                        http.request(POST) {req -&gt;
                                            uri.path='/api/4.0/uploadfile.do'
                                            requestContentType: "multipart/form-data"
                                            MultipartEntity multiPartContent = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE)
                                            multiPartContent.addPart(new FormBodyPart("app_id", new StringBody(appId)))
                                            multiPartContent.addPart(new FormBodyPart('file',new FileBody(uploadFile, "text/plain")))
                                            req.setEntity(multiPartContent)
                                        }

                                        println "Submitting /api/4.0/beginprescan.do"
                                        http.request(POST) {
                                        uri.path = '/api/4.0/beginprescan.do'
                                        uri.query = ['app_id': appId]
                                        }

                                        // the pre-scan could take 3 - 5 minutes
                                        println "Waiting for pre-scan to complete"
                                        sleep 5 * 60 * 1000

                                        println "Submitting /api/4.0/getprescanresults.do"
                                        http.request(GET) {
                                        uri.path = '/api/4.0/getprescanresults.do'
                                        uri.query = ['app_id': appId]
                                        }

                                        println "Submitting /api/4.0/beginscan.do"
                                        http.request(POST) {
                                        uri.path = '/api/4.0/beginscan.do'
                                        uri.query = ['app_id': appId, 'scan_all_top_level_modules': true]
                                        }

                                    </source>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <build>
        <pluginManagement>
            <plugins>
                <!-- todo: remove this once the 2.10 plugin is no longer broken -->
                <!-- http://stackoverflow.com/questions/25983852/maven-javadoc-plugin-breaks-mvn-releaseperform/25986409#25986409 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <version>2.9.1</version>
                </plugin>
                <!-- todo: figure out how these work and move them to where they belong -->
                <!--For JAXB Schema Compilation Support-->
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>xml-maven-plugin</artifactId>
                    <version>1.0</version>

                    <executions>
                        <execution>
                            <goals>
                                <goal>transform</goal>
                            </goals>
                            <phase>generate-sources</phase>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.jvnet.jaxb2.maven2</groupId>
                    <artifactId>maven-jaxb2-plugin</artifactId>
                    <version>0.8.1</version>
                    <configuration>

                        <specVersion>2.1</specVersion>

                        <schemaIncludes>
                            <include>**/*.xsd</include>
                        </schemaIncludes>
                        <bindingIncludes>
                            <include>**/*.xjb</include>
                        </bindingIncludes>

                        <strict>true</strict>
                        <verbose>false</verbose>
                        <extension>true</extension>

                        <args>
                            <arg>-XtoString</arg>
                        </args>
                        <plugins>
                            <plugin>
                                <groupId>org.jvnet.jaxb2_commons</groupId>
                                <artifactId>jaxb2-basics</artifactId>
                                <version>0.6.3</version>
                            </plugin>
                        </plugins>
                    </configuration>

                    <executions>
                        <execution>
                            <goals>
                                <goal>generate</goal>
                            </goals>

                            <phase>process-sources</phase>
                        </execution>
                    </executions>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-release-plugin</artifactId>
                    <version>2.2.2</version>
                </plugin>

                <!--For Testing Support-->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>2.9</version>
                    <configuration>
                        <includes>
                            <include>**/*Test.*</include>
                        </includes>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>

        <plugins>
            <!-- For Scala Support -->
            <plugin>
                <groupId>net.alchim31.maven</groupId>
                <artifactId>scala-maven-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <!--
                    Using the zinc compiler seems to break things!
                     we would get this error:
                     [ERROR] Failed to execute goal net.alchim31.maven:scala-maven-plugin:3.1.6:compile
                     (scala-compile-first) on project akka-http-client-service-impl: Execution scala-compile-first of goal
                     net.alchim31.maven:scala-maven-plugin:3.1.6:compile failed: An API incompatibility was
                     encountered while executing net.alchim31.maven:scala-maven-plugin:3.1.6:compile:
                     java.lang.ClassFormatError: Absent Code attribute in method that is not native or abstract in
                     class file javax/ws/rs/core/MediaType

                     Turning off incremental compilation and it works again. The speed cost isn't there, because
                     we generally have to clean install every time anyway, thanks to build problems. :(
                    -->
                    <!--<recompileMode>incremental</recompileMode>-->
                </configuration>
                <!--
                 http://davidb.github.io/scala-maven-plugin/example_java.html
                 Adjusted execution for the scala plugin to cooperate with mixed scala/java projects
                -->
                <executions>
                    <execution>
                        <id>scala-compile-first</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>add-source</goal>
                            <goal>compile</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>scala-test-compile</id>
                        <phase>process-test-resources</phase>
                        <goals>
                            <goal>testCompile</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.codehaus.gmaven</groupId>
                <artifactId>gmaven-plugin</artifactId>
                <version>${gmaven.version}</version>
                <configuration>
                    <providerSelection>1.8</providerSelection>
                    <source />
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>org.codehaus.gmaven.runtime</groupId>
                        <artifactId>gmaven-runtime-2.0</artifactId>
                        <version>${gmaven.version}</version>
                        <exclusions>
                            <exclusion>
                                <groupId>org.codehaus.groovy</groupId>
                                <artifactId>groovy-all</artifactId>
                            </exclusion>
                        </exclusions>
                    </dependency>
                    <dependency>
                        <groupId>org.codehaus.groovy</groupId>
                        <artifactId>groovy-all</artifactId>
                        <version>${groovy.version}</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <id>buildGroovies</id>
                        <goals>
                            <goal>generateStubs</goal>
                            <goal>compile</goal>
                            <goal>generateTestStubs</goal>
                            <goal>testCompile</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${jacoco.version}</version>
                <executions>
                    <execution>
                        <id>prepare-agent</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <append>true</append>
                </configuration>
            </plugin>
            <!-- for enforcing keeping out some transitive dependencies -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>1.3.1</version>
                <dependencies>
                    <dependency>
                        <groupId>de.is24.maven.enforcer.rules</groupId>
                        <artifactId>illegal-transitive-dependency-check</artifactId>
                        <version>1.7.2</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <id>enforce-banned-dependencies</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <bannedDependencies>
                                    <excludes>
                                        <exclude>commons-logging:commons-logging</exclude>
                                        <exclude>com.rackspace.papi.commons:classloader</exclude>
                                        <exclude>com.rackspace.papi.commons:jetty-container</exclude>
                                        <exclude>com.rackspace.papi.components:datastore-api</exclude>
                                        <exclude>com.rackspace.papi.components:datastore-distributed</exclude>
                                        <exclude>com.rackspace.papi.components:datastore-ehcache</exclude>
                                        <exclude>com.rackspace.papi.components:datastores-support</exclude>
                                    </excludes>
                                    <searchTransitive>true</searchTransitive>
                                </bannedDependencies>
                            </rules>
                            <!-- fail fast makes it bomb after the first failure -->
                            <failFast>true</failFast>
                        </configuration>
                    </execution>
                    <execution>
                        <id>enforce-transitive-dependency-explicitness</id>
                        <phase>process-test-classes</phase>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <illegalTransitiveDependencyCheck implementation="de.is24.maven.enforcer.rules.IllegalTransitiveDependencyCheck">
                                    <reportOnly>false</reportOnly>
                                    <useClassesFromLastBuild>true</useClassesFromLastBuild>
                                    <suppressTypesFromJavaRuntime>true</suppressTypesFromJavaRuntime>
                                    <regexIgnoredClasses>
                                        <regexIgnoredClass>org\.apache\.http\..+</regexIgnoredClass>
                                        <regexIgnoredClass>com\.typesafe\.scalalogging\..+</regexIgnoredClass>
                                        <regexIgnoredClass>play\.api\.libs\.functional\..+</regexIgnoredClass>
                                    </regexIgnoredClasses>
                                </illegalTransitiveDependencyCheck>
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!--
             plugin to let us know about unused dependencies
             It's not very reliable, not like the enforcer plugin's abilities, so I disabled the fail on Warning,
             because it was causing too many false positives. The report could still be useful during manual verficiation however.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>

                <configuration>
                    <failOnWarning>false</failOnWarning>
                    <ignoreNonCompile>true</ignoreNonCompile>
                    <!-- don't include non-compile paths for now -->
                </configuration>
                <executions>
                    <execution>
                        <id>dependency-analysis</id>
                        <phase>process-test-classes</phase>
                        <goals>
                            <goal>analyze-only</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>license-maven-plugin</artifactId>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <dependencies>
                    <dependency>
                        <groupId>org.openrepose</groupId>
                        <artifactId>build-tools</artifactId>
                        <version>${project.version}</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <id>verify-style</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <configLocation>repose-style-configs/checkstyle.xml</configLocation>
                    <consoleOutput>true</consoleOutput>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.scalastyle</groupId>
                <artifactId>scalastyle-maven-plugin</artifactId>
                <dependencies>
                    <dependency>
                        <groupId>org.openrepose</groupId>
                        <artifactId>build-tools</artifactId>
                        <version>${project.version}</version>
                    </dependency>
                </dependencies>
                <configuration>
                    <verbose>false</verbose>
                    <failOnViolation>true</failOnViolation>
                    <includeTestSourceDirectory>true</includeTestSourceDirectory>
                    <failOnWarning>true</failOnWarning>
                    <sourceDirectories>
                        <dir>${basedir}/src/main/scala</dir>
                    </sourceDirectories>
                    <testSourceDirectories>
                        <dir>${basedir}/src/test/scala</dir>
                    </testSourceDirectories>
                    <configLocation>repose-style-configs/scalastyle_config.xml</configLocation>
                    <outputEncoding>UTF-8</outputEncoding>
                </configuration>
                <executions>
                    <execution>
                        <phase>verify</phase>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- this is working now that doxygen is commented out-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <dependencies>
                    <dependency>
                        <groupId>org.codenarc</groupId>
                        <artifactId>CodeNarc</artifactId>
                        <version>0.21</version>
                        <exclusions>
                            <exclusion>
                                <groupId>ant</groupId>
                                <artifactId>ant</artifactId>
                            </exclusion>
                        </exclusions>
                    </dependency>
                    <dependency>
                        <groupId>org.openrepose</groupId>
                        <artifactId>build-tools</artifactId>
                        <version>${project.version}</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <id>codenarc</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target>
                                <taskdef name="codenarc" classname="org.codenarc.ant.CodeNarcTask" classpathref="maven.plugin.classpath" />
                                <codenarc ruleSetFiles="classpath:repose-style-configs/ruleset.xml" maxPriority1Violations="0" maxPriority2Violations="0" maxPriority3Violations="0">
                                    <report type="xml">
                                        <option name="outputFile" value="${basedir}/target/CodeNarc.xml" />
                                        <option name="title" value="${project.name}" />
                                    </report>
                                    <report type="html">
                                        <option name="outputFile" value="${basedir}/target/CodeNarc.html" />
                                        <option name="title" value="${project.name}" />
                                    </report>
                                    <fileset dir="${basedir}/src/test/groovy" erroronmissingdir="false">
                                        <include name="**/*.groovy" />
                                    </fileset>
                                </codenarc>
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
