dependencies {
    compile project(":repose-aggregator:core:repose-core-api")
    compile project(":repose-aggregator:commons:commons-utilities")
    compile project(":repose-aggregator:core:repose-core")
    compile "xalan:xalan" // Forces the version used by api-checker.
    compile "com.google.guava:guava" // Forces the version used by api-checker.
    compile "io.spray:spray-json_2.12" // Forces the version used by api-checker.
    compile "com.rackspace.papi.components.api-checker:checker-core"
    compile "io.dropwizard.metrics:metrics-core"
    compile "org.slf4j:slf4j-api"
    compile "org.springframework:spring-beans"

    compileOnly "javax.servlet:javax.servlet-api"
    compileOnly "javax.inject:javax.inject"

    testCompile project(":repose-aggregator:commons:commons-test")
    testCompile "junit:junit"
    testCompile "org.codehaus.groovy:groovy-all"
    testCompile "org.hamcrest:hamcrest-library"
    testCompile "org.mockito:mockito-core"
    testCompile "org.springframework:spring-test"
    testCompile "org.slf4j:jcl-over-slf4j"
}

jacocoTestCoverageVerification {
    violationRules {
        rules.forEach { rule ->
            rule.limits.forEach { limit ->
                if (limit.counter == 'INSTRUCTION' && limit.value == 'COVEREDRATIO') {
                    // todo: set to the current coverage -- need more coverage, but we don't want the build to fail for the baseline
                    limit.minimum = 0.70
                }
            }
        }
    }
}
