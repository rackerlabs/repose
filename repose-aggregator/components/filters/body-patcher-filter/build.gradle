dependencies {
    xjc "org.jvnet.jaxb2_commons:jaxb2-fluent-api"
    xjc "org.jvnet.jaxb2_commons:jaxb2-basics"

    generatedCompile "org.jvnet.jaxb2_commons:jaxb2-basics-runtime"

    compile project(":repose-aggregator:core:repose-core-api")
    compile "org.scala-lang:scala-library"
    compile "com.typesafe.scala-logging:scala-logging-slf4j_$scalaMajDotMin"
    compile "com.typesafe.play:play-json_$scalaMajDotMin"
    compile "org.gnieh:diffson_$scalaMajDotMin"
    compile "com.fasterxml.jackson.core:jackson-core"

    compileOnly "javax.servlet:javax.servlet-api"
    compileOnly "javax.inject:javax.inject"

    testCompile project(':repose-aggregator:commons:commons-test')
    testCompile "junit:junit"
    testCompile "org.scalatest:scalatest_$scalaMajDotMin"
    testCompile "xerces:xerces-xsd11"
    testCompile "org.springframework:spring-test"
    testCompile "org.springframework:spring-web"
    testCompile "org.slf4j:jcl-over-slf4j"
    testCompile "org.hamcrest:hamcrest-all"
    testCompile "org.mockito:mockito-all"
}

jaxb {
    xjc {
        args = ["-Xfluent-api", "-XtoString"]
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rules.forEach { rule ->
            rule.limits.forEach { limit ->
                if (limit.counter == 'INSTRUCTION' && limit.value == 'COVEREDRATIO') {
                    // todo: set to the current coverage -- need more coverage, but we don't want the build to fail for the baseline
                    // todo: the missing coverage is from xjc-generated classes
                    limit.minimum = 0.31
                }
            }
        }
    }
}
