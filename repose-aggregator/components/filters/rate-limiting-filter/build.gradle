dependencies {
    compile project(":repose-aggregator:core:repose-core-api")
    compile project(":repose-aggregator:commons:commons-utilities")
    compile project(":repose-aggregator:components:services:rate-limiting-service") //todo: move all that code into here, and get rid of the service that isn't one, REP-3953
    compile project(":repose-aggregator:components:services:datastore-service:datastore-service-api")
    compile "org.slf4j:slf4j-api"
    compile "com.typesafe.play:play-json_$scalaMajDotMin"
    compile "commons-pool:commons-pool"
    compile "org.scala-lang:scala-library"
    compile "org.scala-lang.modules:scala-xml_$scalaMajDotMin"
    compile "xalan:xalan"
    compile "org.springframework:spring-web"

    compileOnly "javax.servlet:javax.servlet-api"
    compileOnly "javax.inject:javax.inject"

    testCompile "junit:junit"
    testCompile "org.hamcrest:hamcrest-library"
    testCompile "org.codehaus.groovy:groovy-all"
    testCompile "org.scalatest:scalatest_$scalaMajDotMin"
    testCompile "org.mockito:mockito-core"
    testCompile "org.spockframework:spock-core"
    testCompile "org.springframework:spring-test"
    testCompile "org.slf4j:jcl-over-slf4j"
    testCompile "xerces:xerces-xsd11"
}

sourceSets.main.scala.srcDir "src/main/java"
sourceSets.main.java.srcDirs = []

license {
    excludes(["**/absolute-limits.json", "**/absolute-limits.xml", "**/combined-limits.xml", "**/lbaas-limits-json.xsl",
              "**/limits-json.xsl", "**/limits-combine.xsl"])
}

jacocoTestCoverageVerification {
    violationRules {
        rules.forEach { rule ->
            rule.limits.forEach { limit ->
                if (limit.counter == 'INSTRUCTION' && limit.value == 'COVEREDRATIO') {
                    // todo: set to the current coverage -- need more coverage, but we don't want the build to fail for the baseline
                    limit.minimum = 0.54
                }
            }
        }
    }
}
