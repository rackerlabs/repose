import org.apache.tools.ant.filters.ReplaceTokens

dependencies {
    compile project(":repose-aggregator:commons:commons-utilities")
    compile "io.dropwizard.metrics:metrics-core"
    compile "org.scala-lang:scala-library"
    compile "org.scala-lang:scala-reflect" // Forces the version used by scala-logging.
    compile "com.typesafe.scala-logging:scala-logging-slf4j_$scalaMajDotMin"

    compileOnly 'org.projectlombok:lombok'
    compileOnly "org.glassfish:javax.servlet"

    testCompile project(":repose-aggregator:core:repose-core")
    testCompile project(":repose-aggregator:commons:commons-test")
    testCompile "junit:junit"
    testCompile "org.scalatest:scalatest_$scalaMajDotMin"
    testCompile "org.hamcrest:hamcrest-library"
    testCompile "org.mockito:mockito-core"
    testCompile "org.springframework:spring-test"
}

license {
    excludes(["**/httpx-headers.xsd", "**/httpx-common.xsd", "**/httpx.xsd", "**/request.xml", "**/response.xml"])
}

processResources {
    //INFO: We'd like to use the more standard gradle 'expand( docsHome: docsHome)',
    // however it chokes pretty hard on the regexs we sprinkle into our xml specifically the `\`.
    // We can update our config file examples to not have that in the regex,
    // however some of the schemas we've imported also have them, and we shouldn't mess with those.
    // Instead I've elected to use ant based filtering.
    filter(ReplaceTokens, tokens: [docsHome: docsHome])
}

jacocoTestCoverageVerification {
    violationRules {
        rules.forEach { rule ->
            rule.limits.forEach { limit ->
                if (limit.counter == 'INSTRUCTION' && limit.value == 'COVEREDRATIO') {
                    // todo: set to the current coverage -- need more coverage, but we don't want the build to fail for the baseline
                    limit.minimum = 0.07
                }
            }
        }
    }
}
