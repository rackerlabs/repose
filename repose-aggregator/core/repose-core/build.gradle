configurations {
    testEar
}

dependencies {
    compile project(":repose-aggregator:commons:commons-configuration")
    compile project(":repose-aggregator:commons:commons-utilities")
    compile project(":repose-aggregator:components:services:atom-feed-service:atom-feed-service-impl")
    compile project(":repose-aggregator:components:services:container-configuration-service:api")
    compile project(":repose-aggregator:components:services:container-configuration-service:impl")
    compile project(":repose-aggregator:components:services:datastore-service:datastore-service-api")
    compile project(":repose-aggregator:components:services:datastore-service:datastore-service-impl")
    compile project(":repose-aggregator:components:services:health-check-service:health-check-service-api")
    compile project(":repose-aggregator:components:services:health-check-service:health-check-service-impl")
    compile project(":repose-aggregator:components:services:http-client-service:http-client-service-api")
    compile project(":repose-aggregator:components:services:http-client-service:http-client-service-impl")
    compile project(":repose-aggregator:components:services:http-logging-service:http-logging-service-api")
    compile project(":repose-aggregator:components:services:http-logging-service:http-logging-service-impl")
    compile project(":repose-aggregator:components:services:open-tracing-service")
    compile project(":repose-aggregator:components:services:phone-home-service")
    compile project(":repose-aggregator:components:services:rate-limiting-service") // Add the rate limiting service classes to the classpath so that the core classloader can access UserRateLimit for serialization/deserialization by the datastore
    compile project(":repose-aggregator:components:services:uri-redaction-service:uri-redaction-service-api")
    compile project(":repose-aggregator:components:services:uri-redaction-service:uri-redaction-service-impl")
    compile project(":repose-aggregator:core:repose-core-api")
    compile project(":repose-aggregator:external:jee6-schemas")
    compile "commons-collections:commons-collections" // Forces the version used by velocity -> avro-ipc -> flume-ng-sdk -> log4j-flume-ng. Alleviates: CVE-2015-6420, CVE-2017-15708
    compile "org.apache.flume:flume-ng-sdk" // Forces the version used by log4j-flume-ng. Alleviates: CVE-2015-2156
    compile "org.apache.logging.log4j:log4j-flume-ng"
    compile "javax.inject:javax.inject"
    compile "io.dropwizard.metrics:metrics-graphite"
    compile "io.dropwizard.metrics:metrics-core"
    compile "org.springframework:spring-beans"
    compile "org.springframework:spring-context"
    compile "org.springframework:spring-core"
    compile "org.springframework:spring-web"
    compile "org.slf4j:slf4j-api"
    compile "org.slf4j:jcl-over-slf4j"
    compile "org.apache.logging.log4j:log4j-api"
    compile "org.apache.logging.log4j:log4j-core"
    compile "org.apache.logging.log4j:log4j-iostreams"
    compile "org.apache.logging.log4j:log4j-slf4j-impl"
    compile "org.apache.logging.log4j:log4j-jul"
    compile "org.scala-lang:scala-library"
    compile "xerces:xerces-xsd11"
    compile "org.apache.httpcomponents:httpclient"
    compile "org.apache.httpcomponents:httpcore"
    compile "joda-time:joda-time"
    compile "org.apache.commons:commons-lang3"
    compile "commons-io:commons-io"
    compile "com.fasterxml.jackson.core:jackson-core"
    compile "com.fasterxml.jackson.core:jackson-annotations"
    compile "com.fasterxml.jackson.core:jackson-databind"
    compile "com.google.guava:guava"
    compile "com.typesafe:config"
    compile "javax.ws.rs:javax.ws.rs-api"
    compile "io.opentracing:opentracing-api"
    compile "io.opentracing:opentracing-util"
    compile 'com.squareup.okhttp3:okhttp' // Forces the version used by jaeger-core.
    compile 'org.apache.thrift:libthrift' // Forces the version used by jaeger-core.
    compile "io.jaegertracing:jaeger-core"

    compileOnly "javax.servlet:javax.servlet-api"

    testCompile "junit:junit"
    testCompile "org.hamcrest:hamcrest-library"
    testCompile "org.codehaus.groovy:groovy-all"
    testCompile "org.scalatest:scalatest_$scalaMajDotMin"
    testCompile "org.mockito:mockito-core"
    testCompile group: 'org.apache.logging.log4j', name: 'log4j-core', classifier: 'tests'
    testCompile "org.springframework:spring-test"
    testCompile "org.spockframework:spock-core"
    testCompile "org.jetbrains:annotations"
    testCompile "io.opentracing:opentracing-mock"
    testCompile project(":repose-aggregator:commons:commons-test")

    testEar project(path: ":repose-aggregator:tests:test-bundles:core-test-filter-bundle", configuration: "archives")
    testEar project(path: ":repose-aggregator:tests:test-bundles:busted-application-name-ear", configuration: "archives")
    testEar project(path: ":repose-aggregator:tests:test-bundles:busted-web-fragment-ear", configuration: "archives")
    testEar project(path: ":repose-aggregator:tests:test-bundles:second-filter-bundle", configuration: "archives")

}

sourceSets.main.scala.srcDir "src/main/java"
sourceSets.main.java.srcDirs = []
sourceSets.test.compileClasspath.add(project.files([sourceSets.test.scala.outputDir]))

compileTestGroovy.dependsOn compileTestScala

task copyEars() {
    description "Copies over ears needed for tests"
    dependsOn(":repose-aggregator:tests:test-bundles:core-test-filter-bundle:ear",
              ":repose-aggregator:tests:test-bundles:busted-application-name-ear:ear",
              ":repose-aggregator:tests:test-bundles:busted-web-fragment-ear:ear",
              ":repose-aggregator:tests:test-bundles:second-filter-bundle:ear")
    ext.outputDir = "$buildDir/earFiles/"
    inputs.files(configurations.testEar.files)
    outputs.dir outputDir

    doLast {
        file(outputDir).mkdirs()
        copy {
            from configurations.testEar.files
            into outputDir
        }
    }
}

test.dependsOn copyEars
testScoverage.dependsOn copyEars

processResources {
    expand(reposeVersion: version, reposeVersionName: reposeCodename)
}

processScoverageResources {
    expand(reposeVersion: version, reposeVersionName: reposeCodename)
}

processTestResources {
    expand(earDirectory: copyEars.outputDir, earVersion: version)
}

processTestScoverageResources {
    expand(earDirectory: copyEars.outputDir, earVersion: version)
}

license {
    excludes(["**/log4j2.component.properties", "**/test.properties", "**/log4j2-List2.json", "**/log4j2-List1.yaml",
              "**/log4j2-List1.json", "**/log4j2-List2.yaml"])
}

jacocoTestCoverageVerification {
    violationRules {
        rules.forEach { rule ->
            rule.limits.forEach { limit ->
                if (limit.counter == 'INSTRUCTION' && limit.value == 'COVEREDRATIO') {
                    // todo: set to the current coverage -- need more coverage, but we don't want the build to fail for the baseline
                    limit.minimum = 0.49
                }
            }
        }
    }
}
