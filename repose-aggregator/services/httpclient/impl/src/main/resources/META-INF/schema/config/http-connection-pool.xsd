<?xml version="1.0" encoding="UTF-8"?>

<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified"
           targetNamespace="http://docs.rackspacecloud.com/repose/http-connection-pool/v1.0"
           xmlns:cp="http://docs.rackspacecloud.com/repose/http-connection-pool/v1.0"
           xmlns:xerces="http://xerces.apache.org"
           xmlns:saxon="http://saxon.sf.net/"
           xmlns:html="http://www.w3.org/1999/xhtml"
           xmlns:vc="http://www.w3.org/2007/XMLSchema-versioning"
           xmlns:xs="http://www.w3.org/2001/XMLSchema">


    <!-- Enumeration and SimpleType definitions -->
    <xs:simpleType name="PositiveInt">
        <xs:restriction base="xs:int">
            <xs:minInclusive value="0"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="NegativeOneAndAllPositiveInt">
        <xs:restriction base="xs:int">
            <xs:minInclusive value="-1"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- Configuration Schema Definitions -->
    <xs:element name="http-connection-pools" type="cp:HttpConnectionPoolConfig"/>

    <xs:complexType name="HttpConnectionPoolConfig">
        <xs:annotation>
            <xs:documentation>
                <html:p>Connection Pool Management settings.</html:p>  
                <html:p>    
                    Please refer to 
                    <html:a href="http://hc.apache.org/httpcomponents-client-ga/tutorial/html/connmgmt.html">Apache HttpComponents Connection Management</html:a>
                </html:p>
            </xs:documentation>
        </xs:annotation>
        
        <xs:sequence>
            <xs:element type="cp:poolType" name="pool" minOccurs="1" maxOccurs="unbounded"/>
        </xs:sequence>

        <xs:assert vc:minVersion="1.1"
                   test="count(distinct-values(pool/@id)) = count(pool/@id)"
                   xerces:message="Pools must have unique ids"
                   saxon:message="Pools must have unique ids" xpathDefaultNamespace="##targetNamespace"/>

        <xs:assert vc:minVersion="1.1"
                   test="count(cp:pool[xs:boolean(@default)=true()]) = 1"
                   xerces:message="One and only one default pool must be defined"
                   saxon:message="One and only one default pool must be defined"/>

    </xs:complexType>


    <xs:complexType name="poolType">

        <xs:attribute name="http.conn-manager.max-total" type="cp:PositiveInt" use="optional" default="200">
            <xs:annotation>
                <xs:documentation>
                    <html:p>
                        Connection Pool Management setting: max total concurrent connections that will be
                        created by a connection pool manager
                    </html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="http.conn-manager.max-per-route" type="cp:PositiveInt" use="optional"
                      default="20">
            <xs:annotation>
                <xs:documentation>
                    <html:p>
                        Connection Pool Management setting: max total concurrent connections for a route
                        that will be created by a connection pool manager.
                    </html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="http.socket.timeout" type="cp:PositiveInt" use="optional" default="30000">
            <xs:annotation>
                <xs:documentation>
                    <html:p>
                        Defines the socket timeout (SO_TIMEOUT) in milliseconds, which is the timeout for
                        waiting for data or, put differently, a maximum period inactivity between two consecutive data
                        packets). A timeout value of zero is interpreted as an infinite timeout. This parameter expects
                        a value of type java.lang.Integer. If this parameter is not set, read operations will not
                        time out (infinite timeout).
                    </html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="http.socket.buffer-size" type="cp:PositiveInt" use="optional" default="8192">
            <xs:annotation>
                <xs:documentation>
                    <html:p>
                        Determines the size of the internal socket buffer used to buffer data while
                        receiving / transmitting HTTP messages.
                    </html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="http.connection.timeout" type="cp:PositiveInt" use="optional" default="30000">
            <xs:annotation>
                <xs:documentation>
                    <html:p>
                        Determines the timeout in milliseconds until a connection is established. A
                        timeout value of zero is interpreted as an infinite timeout.
                        If this parameter is not set, connect operations will not time out (infinite timeout).
                    </html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="http.connection.max-line-length" type="cp:PositiveInt" use="optional"
                      default="8192">
            <xs:annotation>
                <xs:documentation>
                    <html:p>
                        Determines the maximum line length limit. If set to a positive value, any HTTP
                        line exceeding this limit will cause an java.io.IOException. A zero value will
                        effectively disable the check and no limit will be enforced.
                    </html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="http.connection.max-header-count" type="cp:PositiveInt" use="optional"
                      default="100">
            <xs:annotation>
                <xs:documentation>
                    <html:p>
                        Determines the maximum HTTP header count allowed. If set to a positive value, the
                        number of HTTP headers received from the data stream exceeding this limit will cause an
                        java.io.IOException. A zero value will effectively disable the check and no limit will be
                        enforced.
                    </html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="http.connection.max-status-line-garbage" type="cp:PositiveInt" use="optional" default="100">
            <xs:annotation>
                <xs:documentation>
                    <html:p>
                        Defines the maximum number of ignorable lines before we expect a HTTP response's
                        status line. With HTTP/1.1 persistent connections, the problem arises that broken scripts could
                        return a wrong Content-Length (there are more bytes sent than specified). Unfortunately, in some
                        cases, this cannot be detected after the bad response, but only before the next one. So
                        HttpClient must be able to skip those surplus lines this way. 0 disallows all garbage/empty
                        lines before the status line. Use java.lang.Integer#MAX_VALUE for unlimited number.
                    </html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="http.tcp.nodelay" type="xs:boolean" use="optional" default="true">
            <xs:annotation>
                <xs:documentation>
                    <html:p>
                        Determines whether Nagle's algorithm is to be used. Nagle's algorithm tries to
                        conserve bandwidth by minimizing the number of segments that are sent. When applications wish to
                        decrease network latency and increase performance, they can disable Nagle's algorithm (that is
                        enable TCP_NODELAY. Data will be sent earlier, at the cost of an increase in bandwidth
                        consumption. If this parameter is not set, TCP_NODELAY will be enabled (no delay).
                    </html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="keepalive.timeout" type="cp:PositiveInt" use="optional" default="0">
            <xs:annotation>
                <xs:documentation>
                    <html:p>Some HTTP servers use a non-standard Keep-Alive header to communicate to the client the
                        period of time in seconds they intend to keep the connection alive on the server side.  If this
                        header is present in the response, the value in this header will be used to determine the maximum
                        length of time to keep a persistent connection open for.
                    </html:p>
                    <html:p>
                        If the Keep-Alive header is NOT present in the response, the value of keepalive.timeout is
                        evaluated.  If this value is 0, the connection will be kept alive indefinitely.  If the value is
                        greater than 0, the connection will be kept alive for the number of milliseconds specified.
                    </html:p>
                    <html:p>
                        Please refer to
                        <html:a href="http://hc.apache.org/httpcomponents-client-ga/tutorial/html/connmgmt.html">Apache HttpComponents Connection Management</html:a>
                    </html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="id" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>
                    <html:p>
                        Unique pool identifier.
                    </html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="default" type="xs:boolean" use="optional" default="false">
            <xs:annotation>
                <xs:documentation>
                    <html:p>
                        Determines whether or not this pool configuration should
                        be considered the default when a pool of HTTP connections is requested from the service.
                    </html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="chunked-encoding" type="xs:boolean" use="optional" default="true">
            <xs:annotation>
                <xs:documentation>
                    <html:p>
                        Determines whether or not this client should send chunked data when forwarding requests.
                    </html:p>
                    <html:p>
                        WARNING: Setting this attribute will cause repose to attempt to retrieve the
                        actual content length through reading the ServletInputStream. This will cause some performance
                        degradation as request body is no longer always streamed through.
                    </html:p>

                </xs:documentation>
            </xs:annotation>
        </xs:attribute>


        <xs:assert vc:minVersion="1.1"
                   test="(@http.conn-manager.max-per-route) &lt;= (@http.conn-manager.max-total)"
                   xerces:message="Max connections per route must be less than or equal to total max connections"
                   saxon:message="Max connections per route must be less than or equal to total max connections"/>

    </xs:complexType>

</xs:schema>
