dependencies {
    compile project(':repose-aggregator:core:repose-core-api')
    compile project(':repose-aggregator:commons:commons-utilities')
    compile project(':repose-aggregator:commons:commons-configuration')
    compile 'org.codehaus.groovy:groovy-all:2.4.15'
    compile 'org.rackspace:deproxy'
    compile 'org.spockframework:spock-core'
    compile 'org.apache.commons:commons-lang3'
    compile 'org.springframework:spring-web:4.3.21.RELEASE'
    compile 'javax.ws.rs:javax.ws.rs-api'
    compile 'joda-time:joda-time'
    compile 'org.linkedin:org.linkedin.util-groovy'
    compile("com.squareup.okhttp3:okhttp") { // Forces the version used by jaeger-core.
        exclude group: 'com.squareup.okio', module: 'okio'
    }
    compile "com.squareup.okio:okio" // Forces the version used by okhttp.
    compile('org.apache.thrift:libthrift') { // Forces the version used by jaeger-core.
        exclude group: 'org.apache.tomcat.embed', module: 'tomcat-embed-core'
    }
    compile 'org.apache.tomcat.embed:tomcat-embed-core' // Forces the version used by libthrift.
    compile 'io.jaegertracing:jaeger-core:0.27.0'
}

processResources {
    expand(
        version: version,
    )
}

processScoverageResources {
    expand(
        version: version,
    )
}

license {
    excludes(['**/credentials.xsd', '**/atom.xsd', '**/xml.xsd'])
}

jacocoTestCoverageVerification {
    violationRules {
        rules.forEach { rule ->
            rule.limits.forEach { limit ->
                if (limit.counter == 'INSTRUCTION' && limit.value == 'COVEREDRATIO') {
                    // todo: set to the current coverage -- need more coverage, but we don't want the build to fail for the baseline
                    limit.minimum = 0.00
                }
            }
        }
    }
}

dependencyCheck {
    skip = true
}
