<?xml version="1.0" encoding="UTF-8"?>

<scripting xmlns="http://docs.openrepose.org/repose/scripting/v1.0"
           language="groovy">
    import org.openrepose.commons.utils.servlet.http.*
    import java.io.ByteArrayOutputStream
    import javax.servlet.ServletOutputStream
    import javax.servlet.WriteListener
    import javax.ws.rs.core.MediaType

    class ByteArrayServletOutputStream extends ServletOutputStream {
        def baos = new ByteArrayOutputStream()

        void write(int b) {
            baos.write(b)
        }

        String toString() {
            baos.toString()
        }

        boolean isReady() {
            true
        }

        void setWriteListener(WriteListener wl) {
            // do nothing
        }
    }

    def setBody = { responseWrapper, status, body ->
        responseWrapper.setStatus(status)
        responseWrapper.setContentType(MediaType.TEXT_PLAIN)
        responseWrapper.getOutputStream().print(body)
    }

    def responseCodeToReturn = request.getHeader("${responseCodeHeaderName}") as Integer

    def testCase = request.getHeader("${testCaseFirstFilterHeaderName}")
    if (testCase == "REASON_TO_HEADER") {
        filterChain.doFilter(request, response)

        String reason = response.getReason()
        if (reason) {
            response.addHeader("${reasonHeaderName}", reason)
        }
    } else if (testCase == "THROW_EXCEPTION") {
        throw new Exception("This test failed as it should not have reached this filter.")
    }  else if (testCase == "SEND_ERROR_WITH_MESSAGE") {
        response.sendError(responseCodeToReturn, "${reasonMessage}")
    } else if (testCase == "SEND_ERROR_CODE_ONLY") {
        response.sendError(responseCodeToReturn)
    } else if (testCase == "REWRAP_RESPONSE") {
        def headerMode = ResponseMode.valueOf(request.getHeader("${headerModeHeaderName}"))
        def bodyMode = ResponseMode.valueOf(request.getHeader("${bodyModeHeaderName}"))

        def rewrappedResponse = new HttpServletResponseWrapper(response, headerMode, bodyMode)

        rewrappedResponse.sendError(responseCodeToReturn, "${reasonMessage}")

        if (headerMode == ResponseMode.MUTABLE || bodyMode == ResponseMode.MUTABLE) {
            rewrappedResponse.commitToResponse()
        }
    } else if (testCase == "CALL_NEXT_FILTER") {
        filterChain.doFilter(request, response)
    } else if (testCase == "SEND_ERROR_UNCOMMIT_SEND_ERROR") {
        response.sendError(499, "This message should not make it to the client.")
        response.uncommit()
        response.sendError(responseCodeToReturn, "${reasonMessage}")
    } else if (testCase == "SEND_ERROR_UNCOMMIT_SET_BODY") {
        response.sendError(499, "This message should not make it to the client.")
        response.uncommit()
        response.resetError()
        setBody(response, responseCodeToReturn, "${reasonMessage}")
    } else if (testCase == "SET_BODY_SEND_ERROR") {
        setBody(response, 201, "This message should not make it to the client.")
        response.sendError(responseCodeToReturn, "${reasonMessage}")
    } else if (testCase == "SET_LARGE_BODY_SEND_ERROR") {
        setBody(response, 201, "This message should not make it to the client." * 1_000_000)
        response.sendError(responseCodeToReturn, "${reasonMessage}")
    } else if (testCase == "CALL_NEXT_FILTER_THEN_SEND_ERROR") {
        filterChain.doFilter(request, response)
        response.sendError(responseCodeToReturn, "${reasonMessage}")
    } else if (testCase == "OUTPUT_STREAM_SEND_ERROR") {
        def out = new ByteArrayServletOutputStream()
        def rewrappedResponse = new HttpServletResponseWrapper(response, ResponseMode.MUTABLE, ResponseMode.MUTABLE, out)

        rewrappedResponse.sendError(responseCodeToReturn, "${reasonMessage}")
        rewrappedResponse.commitToResponse()
    } else if (testCase == "OUTPUT_STREAM_SET_BODY_SEND_ERROR") {
        def out = new ByteArrayServletOutputStream()
        def rewrappedResponse = new HttpServletResponseWrapper(response, ResponseMode.MUTABLE, ResponseMode.MUTABLE, out)

        setBody(rewrappedResponse, 201, "This message should not make it to the client.")

        rewrappedResponse.sendError(responseCodeToReturn, "${reasonMessage}")
        rewrappedResponse.commitToResponse()
    } else if (testCase == "SET_BODY") {
        setBody(response, 201, "This message should not make it to the client.")
    }
</scripting>
