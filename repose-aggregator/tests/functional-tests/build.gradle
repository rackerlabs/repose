configurations {
    integrationTestRunnable
    integrationTestBundle
}

dependencies {
    integrationTestCompile "junit:junit"
    integrationTestCompile "org.hamcrest:hamcrest-library"
    integrationTestCompile "org.codehaus.groovy:groovy-all"
    integrationTestCompile "org.spockframework:spock-core"
    integrationTestCompile "org.rackspace:deproxy"
    integrationTestCompile "joda-time:joda-time"
    integrationTestCompile project(":repose-aggregator:commons:commons-utilities")
    integrationTestCompile project(":repose-aggregator:commons:commons-configuration")
    integrationTestCompile project(":repose-aggregator:core:repose-core-api")
    integrationTestCompile project(":repose-aggregator:components:services:datastore-service:datastore-service-api")
    integrationTestCompile project(":repose-aggregator:tests:functional-test-framework")
    integrationTestCompile "javax.ws.rs:javax.ws.rs-api"
    integrationTestCompile "org.eclipse.jetty:jetty-server"
    integrationTestCompile "org.eclipse.jetty:jetty-servlet"
    integrationTestCompile "org.apache.commons:commons-lang3"
    integrationTestCompile "org.springframework:spring-web"
    integrationTestCompile "org.apache.logging.log4j:log4j-slf4j-impl"
    integrationTestCompile "org.slf4j:jcl-over-slf4j"
    integrationTestCompile "com.google.guava:guava"

    integrationTestRunnable project(path: ":repose-aggregator:artifacts:valve", configuration: "fatJar")
    integrationTestRunnable project(path: ":repose-aggregator:tests:mocks-servlet", configuration: "archives")

    integrationTestBundle project(path: ":repose-aggregator:artifacts:filter-bundle", configuration: "archives")
    integrationTestBundle project(path: ":repose-aggregator:artifacts:extensions-filter-bundle", configuration: "archives")
    integrationTestBundle project(path: ":repose-aggregator:artifacts:experimental-filter-bundle", configuration: "archives")
    integrationTestBundle project(path: ":repose-aggregator:tests:test-bundles:classloader-bundle-one", configuration: "archives")
    integrationTestBundle project(path: ":repose-aggregator:tests:test-bundles:classloader-bundle-two", configuration: "archives")
    integrationTestBundle project(path: ":repose-aggregator:tests:test-bundles:classloader-bundle-three", configuration: "archives")
    integrationTestBundle project(path: ":repose-aggregator:tests:test-bundles:classloader-bundle-four", configuration: "archives")
    integrationTestBundle project(path: ":repose-aggregator:tests:test-bundles:classloader-bundle-five", configuration: "archives")
}

task copyArtifacts() {
    dependsOn(":repose-aggregator:artifacts:valve:shadowJar",
              ":repose-aggregator:tests:mocks-servlet:war",
              ":repose-aggregator:tests:mocks-servlet:war",
              ":repose-aggregator:artifacts:filter-bundle:ear",
              ":repose-aggregator:artifacts:extensions-filter-bundle:ear",
              ":repose-aggregator:artifacts:experimental-filter-bundle:ear",
              ":repose-aggregator:tests:test-bundles:classloader-bundle-one:ear",
              ":repose-aggregator:tests:test-bundles:classloader-bundle-two:ear",
              ":repose-aggregator:tests:test-bundles:classloader-bundle-three:ear",
              ":repose-aggregator:tests:test-bundles:classloader-bundle-four:ear",
              ":repose-aggregator:tests:test-bundles:classloader-bundle-five:ear")
    ext.outputDir = "$buildDir/repose_home"
    inputs.files(configurations.integrationTestRunnable.files,
                 configurations.integrationTestBundle.files)
    outputs.dir outputDir

    doLast {
        //copy the runnables
        file(outputDir).mkdirs()
        copy {
            from configurations.integrationTestRunnable.files
            into outputDir
        }

        //copy the bundles
        file("$outputDir/artifacts").mkdirs()
        copy {
            from configurations.integrationTestBundle.files
            into "$outputDir/artifacts"
        }
    }
}

task copyConfigs() {
    ext.outputDir = "$buildDir/configs"
    inputs.dir "$projectDir/src/integrationTest/configs"
    outputs.dir outputDir

    doLast {
        //copy the configs
        file(outputDir).mkdirs()
        copy {
            from "$projectDir/src/integrationTest/configs"
            into outputDir
        }
    }
}

integrationTest.dependsOn copyArtifacts, copyConfigs

def container = "valve"
def targetHostName = "localhost"
def valveFileName = tasks.getByPath(":repose-aggregator:artifacts:valve:shadowJar").archiveName.split("/").last()
def mocksFileName = tasks.getByPath(":repose-aggregator:tests:mocks-servlet:war").archiveName.split("/").last()

processIntegrationTestResources {
    expand(
        reposeHome: copyArtifacts.outputDir,
        version: version,
        testRootDir: buildDir,
        configTemplates: copyConfigs.outputDir,
        reposeContainer: container,
        valveLocation: "${copyArtifacts.outputDir}/$valveFileName",
        mocksLocation: "${copyArtifacts.outputDir}/$mocksFileName",
        targetHostname: targetHostName
    )
}

integrationTest {
    useJUnit {
        def runTest = project.findProperty("run") ?: 'smoke'
        switch(runTest) {
            case "all":
                excludeCategories "scaffold.category.Bug"
                break
            case "bug":
                includeCategories "scaffold.category.Bug"
                break
            case "core":
                includeCategories "scaffold.category.Core"
                break
            case "filters":
                includeCategories "scaffold.category.Filters"
                break
            case "identity":
                includeCategories "scaffold.category.Identity"
                break
            case "intense":
                includeCategories "scaffold.category.Intense"
                break
            case "recipe":
                includeCategories "scaffold.category.Recipe"
                break
            case "services":
                includeCategories "scaffold.category.Services"
                break
            case "xml":
                includeCategories "scaffold.category.XmlParsing"
                break
            default:
                includeCategories "scaffold.category.Smoke"
        }
    }

    maxParallelForks = (project.findProperty('integrationTestMaxParallelForks') ?: '1') as int

    if (project.hasProperty('showLog')) {
        testLogging {
            showStandardStreams = true
        }
    }
}

dependencyCheck {
    skip = true
}
