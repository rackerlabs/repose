import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'nebula.ospackage'

configurations {
    fatJar
    deb
    rpm
}

dependencies {
    compile project(":repose-aggregator:core:repose-core-api")
    compile project(":repose-aggregator:commons:commons-configuration")
    compile project(":repose-aggregator:commons:commons-utilities")
    compile project(":repose-aggregator:components:services:http-logging-service:http-logging-service-api")
    compile project(":repose-aggregator:core:repose-core")
    compile "org.scala-lang:scala-library"
    compile "org.scala-lang:scala-reflect" // Forces the version used by scala-logging.
    compile "com.typesafe.scala-logging:scala-logging_$scalaMajDotMin"
    compile "org.slf4j:jcl-over-slf4j"
    compile "com.github.scopt:scopt_$scalaMajDotMin"
    compile "com.typesafe:config"
    compile "org.springframework:spring-core"
    compile "org.springframework:spring-context"
    compile "org.springframework:spring-web"
    compile "org.springframework:spring-beans"
    compile "org.eclipse.jetty:jetty-servlet"
    compile "org.eclipse.jetty:jetty-server"
    compile "org.eclipse.jetty:jetty-util"

    compileOnly "javax.inject:javax.inject"

    testCompile "junit:junit"
    testCompile "org.scalatest:scalatest_$scalaMajDotMin"
    testCompile "org.mockito:mockito-core"
    testCompile "org.apache.httpcomponents:httpclient"
}

processResources {
    expand(reposeVersion: version, jettyVersion: versionProperties.get('jettyVersion'))
}

processScoverageResources {
    expand(reposeVersion: version, jettyVersion: versionProperties.get('jettyVersion'))
}

jar {
    manifest {
        attributes 'Main-Class': 'org.openrepose.valve.Main'
    }
}

shadowJar {
    archiveName = 'repose.jar'
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    exclude 'META-INF/org/apache/logging/log4j/core/config/plugins/Log4j2Plugins.dat'
}

artifacts {
    fatJar shadowJar
    deb buildDeb
    rpm buildRpm
}

build.dependsOn shadowJar

signing {
    required { gradle.taskGraph.hasTask("publish") }
    sign shadowJar
}

publishing {
    publications {
        nebula(MavenPublication) {
            artifact shadowJar {
                //this is neccessary because i changed the archive name in shadow jar,
                // so i wouldn't have to go hack the crap out of the testing framework
                groupId project.group
                artifactId project.name
                version project.version
                classifier 'all'
            }
            if(project.hasProperty('release')) {
                artifact source: signShadowJar.singleSignature, extension: 'asc'
                artifact source: buildDeb, extension: 'deb'
                artifact source: buildRpm, extension: 'rpm'
            }
        }
    }
}

ospackage {
    packageName = "repose"
    os = LINUX
    packageDescription 'Package for the Repose Valve Deployment'
    priority 'optional'
    packageGroup 'Applications/Internet'
    maintainer 'Repose Development <ReposeCore@Rackspace.com>'
    url 'http://openrepose.org'

    if(project.hasProperty('signing.keyId') && project.hasProperty('signing.password') && project.hasProperty('signing.secretKeyRingFile')) {
        signingKeyId project.getProperty('signing.keyId')
        signingKeyPassphrase project.getProperty('signing.password')
        signingKeyRingFile file(project.getProperty('signing.secretKeyRingFile'))
    }

    into '/usr/share/repose'

    //the main directory
    from('src/config/DELETE-ME') {
        createDirectoryEntry true
        user 'root'
        permissionGroup 'root'
        fileMode 0555
    }

    //the web app
    from(shadowJar.outputs.files) {
        user 'root'
        permissionGroup 'root'
        fileMode 0555
    }

    //the filter bundle directory
    from('src/config/DELETE-ME') {
        into '/usr/share/repose/filters'
        createDirectoryEntry true
        user 'repose'
        permissionGroup 'repose'
        fileMode 0755
    }

    //the artifact exploding directory
    from('src/config/DELETE-ME') {
        into '/var/repose'
        createDirectoryEntry true
        user 'repose'
        permissionGroup 'repose'
        fileMode 0750
    }

    //the log directory
    from('src/config/DELETE-ME') {
        into '/var/log/repose'
        createDirectoryEntry true
        user 'repose'
        permissionGroup 'repose'
        fileMode 0750
    }

    //the log rotate settings
    from('src/config/logrotate.d') {
        into '/etc/logrotate.d'
        createDirectoryEntry false
        user 'repose'
        permissionGroup 'repose'
        fileMode 0644
    }

    //the configs directory
    from('src/config/DELETE-ME') {
        into '/etc/repose'
        createDirectoryEntry true
        user 'repose'
        permissionGroup 'repose'
        fileMode 0770
    }

    //the basic configs
    from('src/config/filters') { //not really filter config, but it's where the bundles are putting them for now, so i'm maintaining consistency
        into '/etc/repose'
        createDirectoryEntry true
        user 'repose'
        permissionGroup 'repose'
        fileMode 0640
        fileType CONFIG | NOREPLACE

        //INFO: We'd like to use the more standard gradle 'expand( docsHome: docsHome)',
        // however it chokes pretty hard on the regexs we sprinkle into our xml specifically the `\`.
        // We can update our config file examples to not have that in the regex,
        // however some of the schemas we've imported also have them, and we shouldn't mess with those.
        // Instead I've elected to use ant based filtering.
        filter(ReplaceTokens, tokens: [docsHome: docsHome])
    }

    //the configs
    from('src/config/filters') {
        into '/etc/repose/examples'
        createDirectoryEntry true
        user 'repose'
        permissionGroup 'repose'
        fileMode 0640

        //INFO: We'd like to use the more standard gradle 'expand( docsHome: docsHome)',
        // however it chokes pretty hard on the regexs we sprinkle into our xml specifically the `\`.
        // We can update our config file examples to not have that in the regex,
        // however some of the schemas we've imported also have them, and we shouldn't mess with those.
        // Instead I've elected to use ant based filtering.
        filter(ReplaceTokens, tokens: [docsHome: docsHome])
    }

    //the systemd service
    from('src/config/systemd/repose.service') {
        into '/lib/systemd/system'
        createDirectoryEntry false
        user 'root'
        permissionGroup 'root'
        fileMode 0644
    }

    //the systemd wrapper script
    from('src/config/scripts/repose-systemd') {
        rename('repose-systemd', 'repose')
        into '/usr/share/repose'
        createDirectoryEntry false
        user 'root'
        permissionGroup 'root'
        fileMode 0755
    }

    //the sysconfig
    from('src/config/sysconfig') {
        into '/etc/sysconfig'
        createDirectoryEntry false
        user 'root'
        permissionGroup 'root'
        fileMode 0644
    }

    //clean up script
    from('src/config/scripts/clean-repose-deploy') {
        user 'root'
        permissionGroup 'root'
        fileMode 0755
    }
    link('/usr/bin/clean-repose-deploy', '/usr/share/repose/clean-repose-deploy')

    //the license info
    from(["$rootDir/LICENSE.txt", "$rootDir/CONTRIBUTORS.txt", 'src/config/docs/DEPENDENCIES.txt']) {
        into '/usr/share/doc/repose'
        user 'root'
        permissionGroup 'root'
        fileMode 0444
    }

    conflicts('repose-war')
    recommends('repose-filter-bundle')
    suggests('repose-extensions-filter-bundle')
    suggests('logrotate')
    replaces('repose-valve')
}

buildDeb {
    //the init.d
    from('src/config/scripts/repose-deb') {
        rename('repose-deb', 'repose')
        into '/etc/init.d'
        createDirectoryEntry false
        user 'root'
        permissionGroup 'root'
        fileMode 0755
    }

    requires('java8-runtime-headless')
    preInstall file('src/config/scripts/preinst-deb')
    configurationFile '/etc/repose/container.cfg.xml'
    configurationFile '/etc/repose/system-model.cfg.xml'
    configurationFile '/etc/repose/log4j2.xml'
    configurationFile '/etc/init.d/repose'
}

buildRpm {
    release = 1

    //the init.d
    from('src/config/scripts/repose-rpm') {
        rename('repose-rpm', 'repose')
        into '/etc/init.d'
        createDirectoryEntry false
        user 'root'
        permissionGroup 'root'
        fileMode 0755
    }

    requires('java', '1.8.0', GREATER | EQUAL)
    preInstall file('src/config/scripts/preinst-rpm')
    postInstall('/sbin/chkconfig --add repose')
}
