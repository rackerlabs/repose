import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'war'
apply plugin: 'nebula.ospackage'

dependencies {
    compile project(":repose-aggregator:core:repose-core-api")
    compile project(":repose-aggregator:core:repose-core")
    compile "com.typesafe:config"
    compile "org.springframework:spring-web"
    compile "org.springframework:spring-context"

    compileOnly "javax.servlet:javax.servlet-api"

    testCompile "junit:junit"
    testCompile "org.scala-lang:scala-library"
    testCompile "org.scalatest:scalatest_$scalaMajDotMin"
    testCompile "org.mockito:mockito-all"
}

war {
    manifest {
        attributes(
                "Specification-Title": "Repose Components - $project.name",
                "Specification-Vendor": "Rackspace US, Inc.",
                "Specification-Version": version,
                "Implementation-Title": "Repose Components - $project.name",
                "Implementation-Version": version,
                "Implementation-Vendor": "Rackspace US, Inc.",
                "Implementation-Vendor-Id": project.group,
                "Built-By": System.getProperty('user.name'),
                "Build-Jdk": org.gradle.internal.jvm.Jvm.current(),
                "Created-By": "Gradle $project.gradle.gradleVersion",
        )
    }
}

publishing {
    publications {
        nebula(MavenPublication) {
            if(project.hasProperty('release')) {
                artifact source: buildDeb, extension: 'deb'
                artifact source: buildRpm, extension: 'rpm'
            }

            pom.withXml {
                asNode().appendNode('packaging', 'war')
            }
        }
    }
}

ospackage {
    packageName = "repose-war"
    os = LINUX
    packageDescription 'Package for the Repose WAR Deployment'
    priority 'optional'
    packageGroup 'Applications/Internet'
    maintainer 'Repose Development <ReposeCore@Rackspace.com>'
    url 'http://openrepose.org'

    if(project.hasProperty('signing.keyId') && project.hasProperty('signing.password') && project.hasProperty('signing.secretKeyRingFile')) {
        signingKeyId project.getProperty('signing.keyId')
        signingKeyPassphrase project.getProperty('signing.password')
        signingKeyRingFile file(project.getProperty('signing.secretKeyRingFile'))
    }

    into '/usr/share/repose'

    //the main directory
    from('../src/config/DELETE-ME') {
        createDirectoryEntry true
        user 'root'
        permissionGroup 'root'
        fileMode 0555
    }

    //the web app
    from(war.outputs.files) {
        rename('(.*).war', 'ROOT.war')
        user 'root'
        permissionGroup 'root'
        fileMode 0555
    }

    //the filter bundle directory
    from('../src/config/DELETE-ME') {
        into '/usr/share/repose/filters'
        createDirectoryEntry true
        user 'repose'
        permissionGroup 'repose'
        fileMode 0755
    }

    //the artifact exploding directory
    from('../src/config/DELETE-ME') {
        into '/var/repose'
        createDirectoryEntry true
        user 'repose'
        permissionGroup 'repose'
        fileMode 0750
    }

    //the log directory
    from('../src/config/DELETE-ME') {
        into '/var/log/repose'
        createDirectoryEntry true
        user 'repose'
        permissionGroup 'repose'
        fileMode 0750
    }

    //the log rotate settings
    from('../src/config/logrotate.d') {
        into '/etc/logrotate.d'
        createDirectoryEntry false
        user 'repose'
        permissionGroup 'repose'
        fileMode 0644
    }

    //the configs directory
    from('../src/config/DELETE-ME') {
        into '/etc/repose'
        createDirectoryEntry true
        user 'repose'
        permissionGroup 'repose'
        fileMode 0770
    }

    //the basic configs
    from('../src/config/filters') { //not really filter config, but it's where the bundles are putting them for now, so i'm maintaining consistency
        into '/etc/repose'
        createDirectoryEntry true
        user 'repose'
        permissionGroup 'repose'
        fileMode 0640
        fileType CONFIG | NOREPLACE

        //INFO: We'd like to use the more standard gradle 'expand( docsHome: docsHome)',
        // however it chokes pretty hard on the regexs we sprinkle into our xml specifically the `\`.
        // We can update our config file examples to not have that in the regex,
        // however some of the schemas we've imported also have them, and we shouldn't mess with those.
        // Instead I've elected to use ant based filtering.
        filter(ReplaceTokens, tokens: [docsHome: docsHome])
    }

    //the configs
    from('../src/config/filters') {
        into '/etc/repose/examples'
        createDirectoryEntry true
        user 'repose'
        permissionGroup 'repose'
        fileMode 0640

        //INFO: We'd like to use the more standard gradle 'expand( docsHome: docsHome)',
        // however it chokes pretty hard on the regexs we sprinkle into our xml specifically the `\`.
        // We can update our config file examples to not have that in the regex,
        // however some of the schemas we've imported also have them, and we shouldn't mess with those.
        // Instead I've elected to use ant based filtering.
        filter(ReplaceTokens, tokens: [docsHome: docsHome])
    }

    //the license info
    from(["$rootDir/LICENSE.txt", "$rootDir/CONTRIBUTORS.txt", 'src/config/docs/DEPENDENCIES.txt']) {
        into '/usr/share/doc/repose-war'
        user 'root'
        permissionGroup 'root'
        fileMode 0444
    }

    provides("repose-$project.version")
    conflicts('repose-valve')
    recommends('repose-filter-bundle')
    suggests('repose-extensions-bundle')
    suggests('logrotate')
}

buildDeb {
    requires('java8-runtime-headless')
    preInstall file('../src/config/scripts/preinst-deb')
    configurationFile '/etc/repose/container.cfg.xml'
    configurationFile '/etc/repose/system-model.cfg.xml'
    configurationFile '/etc/repose/response-messaging.cfg.xml'
    configurationFile '/etc/repose/log4j2.xml'
}

buildRpm {
    release = 1

    requires('java', '1.8.0', GREATER | EQUAL)
    preInstall file('../src/config/scripts/preinst-rpm')
}
